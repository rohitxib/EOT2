//
//  MapVC.swift
//  EyeOnTask
//
//  Created by Hemant Pandagre on 19/07/18.
//  Copyright Â© 2018 Hemant. All rights reserved.
//

import UIKit
import MapKit
class MapVC: UIViewController , MKMapViewDelegate , CLLocationManagerDelegate {

    
    @IBOutlet weak var mapView: MKMapView!
    var locationManager: CLLocationManager!
    var lattitude: String!
    var longitude: String!
    var address: String!
    //var cllocation : CLLocation?
    
   // var locationManager = CLLocationManager()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.mapView.delegate = self
         setLocalization()
        
        // set destination location
        
        let location = CLLocation(latitude: CLLocationDegrees(lattitude)!, longitude: CLLocationDegrees(longitude)!)
        let anno = MKPointAnnotation();
        anno.coordinate = location.coordinate;
        anno.title = address
        
        
        // Show route between fw's current location and job location
        if LocationManager.shared.isCheckLocation() {
            
            let currentLocation = LocationManager.shared.Currentloc.coordinate
            
            self.showRouteOnMap(pickupCoordinate: currentLocation, destinationCoordinate: CLLocationCoordinate2D(latitude:CLLocationDegrees(lattitude)!, longitude: CLLocationDegrees(longitude)!))
            
            
            let center = CLLocationCoordinate2D(latitude: currentLocation.latitude, longitude: currentLocation.longitude)
            let region = MKCoordinateRegion(center: center, span: MKCoordinateSpan(latitudeDelta: 0.01, longitudeDelta: 0.01))
            
            
            
            DispatchQueue.main.async {
                self.mapView.setRegion(region, animated: true)
                self.mapView.addAnnotation(anno);
            }
        }else{
            DispatchQueue.main.async {
                let center = CLLocationCoordinate2D(latitude: location.coordinate.latitude, longitude: location.coordinate.longitude)
                let region = MKCoordinateRegion(center: center, span: MKCoordinateSpan(latitudeDelta: 0.01, longitudeDelta: 0.01))
                self.mapView.setRegion(region, animated: true)
                self.mapView.addAnnotation(anno);
            }
        }
        
        
     
        
        /////////////////////////////
        
     
        
    }
    
    func setLocalization() -> Void {

        self.navigationItem.title = LanguageKey.location
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()

    }
    
    func showRouteOnMap(pickupCoordinate: CLLocationCoordinate2D, destinationCoordinate: CLLocationCoordinate2D) {
        
        let sourcePlacemark = MKPlacemark(coordinate: pickupCoordinate, addressDictionary: nil)
        let destinationPlacemark = MKPlacemark(coordinate: destinationCoordinate, addressDictionary: nil)
        
        let sourceMapItem = MKMapItem(placemark: sourcePlacemark)
        let destinationMapItem = MKMapItem(placemark: destinationPlacemark)
        
        let sourceAnnotation = MKPointAnnotation()
        
        if let location = sourcePlacemark.location {
            sourceAnnotation.coordinate = location.coordinate
        }
        
        let destinationAnnotation = MKPointAnnotation()
        
        if let location = destinationPlacemark.location {
            destinationAnnotation.coordinate = location.coordinate
        }
        
        self.mapView.showAnnotations([sourceAnnotation,destinationAnnotation], animated: true )
        
        let directionRequest = MKDirections.Request()
        directionRequest.source = sourceMapItem
        directionRequest.destination = destinationMapItem
        directionRequest.transportType = .automobile
        
        // Calculate the direction
        let directions = MKDirections(request: directionRequest)
        
        directions.calculate {
            (response, error) -> Void in
            
            guard let response = response else {
                if let error = error {
                    print("Error: \(error)")
                }
                
                return
            }
            
            let route = response.routes[0]
            
            self.mapView.addOverlay((route.polyline), level: MKOverlayLevel.aboveRoads)
            
            let  rect = route.polyline.boundingMapRect
            self.mapView.setRegion(MKCoordinateRegion(rect), animated: true)
        }
    }
    
    func mapView(_ mapView: MKMapView, rendererFor overlay: MKOverlay) -> MKOverlayRenderer {
        
        let renderer = MKPolylineRenderer(overlay: overlay)
        
        renderer.strokeColor = UIColor(red: 17.0/255.0, green: 147.0/255.0, blue: 255.0/255.0, alpha: 1)
        
        renderer.lineWidth = 5.0
        
        return renderer
    }
    
}
