   //
   //  JobVC.swift
   //  EyeOnTask
   //
   //  Created by Apple on 10/05/18.
   //  Copyright Â© 2018 Hemant. All rights reserved.
   //

  import UIKit
      import CoreData
      import CoreLocation
      class AuditVC: UIViewController, UITableViewDataSource, UITableViewDelegate, UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout, SWRevealViewControllerDelegate , UITextFieldDelegate{
          
          
         // @IBOutlet weak var btnSearchText: UIButton!
       @IBOutlet weak var btnSearchText: UIBarButtonItem!
          @IBOutlet weak var btnReset: UIButton!
          @IBOutlet weak var btnDropDown: UIButton!
          @IBOutlet var tableView: UITableView!
          @IBOutlet var extraButton: UIBarButtonItem!
          @IBOutlet var lblNoJob: UILabel!
          var arrOFUserData = [AuditListData]()
          //var arrOFData = [AuditListData]()
         // var filterDict = [String : [AuditListData]]()
          var arrOfFilterDict  = [[String : [AuditListData]]]()
          var filterTitleArray = [taskStatusType]()
          var filterjobsArray = [Int]()
          var barCodeResponse = [AuditListData]()
          var isAdded = Bool()
          var isChanged = Bool()
          var isfirst = Bool()
          var selectedCell : IndexPath? = nil
          var selectedAuditID : String? = nil
          var isOpenSerchView : Bool = false
          var count : Int = 0
          var previousInProgress : Bool = false
          var selectedDateRange : DateRange?
          @IBOutlet weak var searchVw_H: NSLayoutConstraint!
          @IBOutlet weak var searchView: UIView!
          @IBOutlet weak var txtSearchfield: UITextField!
          @IBOutlet weak var heightOfArrowBtn: NSLayoutConstraint!
          @IBOutlet weak var collectionVw: UICollectionView!
          @IBOutlet weak var collectionVw_H: NSLayoutConstraint!
          var searchTxt = ""
          var optionalVw : OptionalView?
          var refreshControl = UIRefreshControl()
          var customStartDate : Date?
          var customEndDate : Date?
          var selectedStatus : [String] = []
          var isBarcodeScanner = false
          var isNotificationClick = false
          var barcode : String!
          var isReavel = false
       
       @IBOutlet weak var btnSortRecent: UIButton!
       
       @IBOutlet weak var btnSortDate: UIButton!

       @IBOutlet weak var btnAddJob: UIButton!
       
       
       var queue = OperationQueue()
       var jobTabVC : AuditTabController?
       var multiFilterArray = [[String : String]]()
      
      
       var sorting : SortType = SortType.SortByRecent
      
       
       @IBOutlet weak var radioButtonDate: UIImageView!
       @IBOutlet weak var btnSort: UIButton!
       @IBOutlet weak var radioButtonRecent: UIImageView!
       
       @IBOutlet weak var filterTagsView: ASJTagsView!
       @IBOutlet weak var filterView: UIView!
      
       
       @IBOutlet var sortView: UIView!
       @IBOutlet weak var filterViewHeight: NSLayoutConstraint!
       
       @IBOutlet weak var filtertagHeight: NSLayoutConstraint!
       
      
       var sortBtnTag = 0
       
       
       
          //@IBOutlet weak var filterView: ASJTagsView!
          
          let dateRange = [DateRange.Today,
                           DateRange.Yesterday,
                           DateRange.Last7Days,
                           DateRange.Last30Days,
                           DateRange.ThisMonth,
                           DateRange.LastMonth,
                           DateRange.CustomRange]
          
          
          //=========================
          // MARK:- Initial methods
          //=========================
          override func viewDidLoad() {
              super.viewDidLoad()
           
           
              self.extraButton.isEnabled = true
             
              
              
//              APP_Delegate.currentVC = "auditvc"
              self.collectionVw_H.constant = 0.0
              self.heightOfArrowBtn.constant = 0.0
            NotiyCenterClass.registerRefreshAuditListNotifier(vc: self, selector: #selector(self.joblistRefresh(_:)))

              self.searchVw_H.constant = 0
              
              let paddingView = UIView(frame: CGRect(x: 0, y: 0, width: 15, height: self.txtSearchfield.frame.height))
              txtSearchfield.leftView = paddingView
              txtSearchfield.leftViewMode = UITextField.ViewMode.always
              
              let paddingView1 = UIView(frame: CGRect(x: 0, y: 0, width: 20, height: self.txtSearchfield.frame.height))
              txtSearchfield.rightView = paddingView1
              txtSearchfield.rightViewMode = UITextField.ViewMode.always
              
              
              isAdded = true
              isChanged = true
              isfirst = true
              
              lblNoJob.isHidden = true
              if let revealController = self.revealViewController(){
                  revealViewController().delegate = self
                  extraButton.target = revealViewController()
                  extraButton.action = #selector(SWRevealViewController.revealToggle(_:))
                  revealController.tapGestureRecognizer()
              }
              
              //title for the filter functionality, if you want to add any filter in this so simply add and these are automatically showing in UI.
              filterTitleArray = [.New,.Accepted,.OnHold,.Completed]

              showLoader()
            
            
            if isBarcodeScanner {
                self.extraButton.isEnabled = false
                SetBackBarButtonCustom()
                 createSection()
            }else if(isNotificationClick){
                self.extraButton.isEnabled = false
                SetBackBarButtonCustom()
            }else{
                getAuditListService()
            }
              
              self.collectionVw.reloadData()
              refreshControl.attributedTitle = NSAttributedString(string: " ")
              refreshControl.addTarget(self, action: #selector(refreshControllerMethod), for: UIControl.Event.valueChanged)
              tableView.addSubview(refreshControl) // not required when using UITableViewController
              
              setLocalization()
              
            ActivityLog(module:Modules.audit.rawValue , message: ActivityMessages.auditList)
          }
       
       
       
       @objc func popToAuditVC(_ notification: NSNotification){
           let vc = UIStoryboard(name: "MainAudit", bundle: nil).instantiateViewController(withIdentifier: "audit") as! AuditVC;
           let navCon = NavClientController(rootViewController: vc)
           navCon.modalPresentationStyle = .fullScreen
           self.present(navCon, animated: true, completion: nil)
       }
       
          func setLocalization() -> Void {
              self.navigationItem.title = LanguageKey.audit_nav
              lblNoJob .text =  LanguageKey.audit_not_found //LanguageKey.err_no_jobs_found
              txtSearchfield.placeholder = LanguageKey.audit_search_hint
              btnReset.setTitle(LanguageKey.reset, for: .normal)
           
          }

   //
          @objc func joblistRefresh(_ notification: NSNotification){
            if let controllers = self.navigationController?.viewControllers{
                for view in controllers{
                    if (view .isKind(of: AuditVC.self)){
                        self.navigationController?.popToViewController(view, animated: true)
                    }
                }
                self.getAuditListService()
            }
          }

          @objc func refreshControllerMethod() {
               if isBarcodeScanner == true
               {
                   getEquipmentListFromBarcodeScanner(barcodeString : barcode )
               }else{
                   getAuditListService()
               }
          }
          
          
          override func viewWillAppear(_ animated: Bool) {
              super.viewWillAppear(animated)
            
             // self.navigationItem.title = LanguageKey.audit_nav
              tableView.estimatedRowHeight = 200
              tableView.estimatedRowHeight = UITableView.automaticDimension
              tableView.rowHeight = UITableView.automaticDimension
            
              // this condition manage For the case of OFFLINE mode
             if filterjobsArray.count > 0 {
                  filterDataFromDB()
              }else{
                if !isfirst {
                    createSection()
                 }
              }
          }
        
        
        override func viewDidAppear(_ animated: Bool) {
            super.viewDidAppear(animated)
            
            if isNotificationClick && isfirst {
                getAuditListService()
            }
            
            isfirst = false
        }
        
       
       func SetBackBarButtonCustom()
       {
           //Back buttion

           let button = UIBarButtonItem(image: UIImage(named: "back-arrow"), style: .plain, target: self, action: #selector(AuditVC.onClcikBack))
           
           self.navigationItem.leftBarButtonItem  = button
       }

       @objc func onClcikBack(){
            if isBarcodeScanner {
                self.dismiss(animated: true, completion: nil)
            }else if isNotificationClick {
                self.dismiss(animated: true, completion: nil)
            }else{
                 self.navigationController?.popViewController(animated: true)
            }
       }

          
          @IBAction func searchBtnAction(_ sender: Any) {
             if(!isOpenSerchView){
                        self.view.bringSubviewToFront(searchView)
                        self.searchVw_H.constant = 40
                        //self.collectionVw_H.constant = 44
                        self.btnDropDown.isHidden = true
                        UIView.animate(withDuration: 0.3){
                            self.view.layoutIfNeeded()
                        }
                        isOpenSerchView = true

                        //Hide FilterView
                        //self.heightOfArrowBtn.constant = 26.0
                        UIView.animate(withDuration: 0.5){
                            self.view.layoutIfNeeded()
                        }
                    }else{
                        showDataOnTableView(query: nil)
                        self.searchVw_H.constant = 0
                        //self.collectionVw_H.constant = 80
                        self.btnDropDown.isHidden = false
                        self.txtSearchfield.text = ""
                        UIView.animate(withDuration: 0.3){
                            self.view.layoutIfNeeded()
                        }
                        txtSearchfield.resignFirstResponder()
                        isOpenSerchView = false

                    }
          }
          
          //=======================
          // MARK:- Txt Field Delegates
          //========================
          func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
              let result = (textField.text as NSString?)?.replacingCharacters(in: range, with: string) ?? string

              if result.count == 0 {
                  searchTxt = ""
                  self.arrOFUserData.removeAll()
                  self.getAuditListService()
              }

              
              return true
          }

          
          func textFieldShouldReturn(_ textField: UITextField) -> Bool {
              self.txtSearchfield.resignFirstResponder()
              return true
          }
          
          //=======================
          // searchApiCall
          //========================
          
          @IBAction func searchTextButton(_ sender: Any) {
                 searchTxt =  trimString(string: txtSearchfield.text!)
              if searchTxt.count > 0 {
                  showLoader()
                if isBarcodeScanner == true{
                    getEquipmentListFromBarcodeScanner(barcodeString : barcode )
                }else{
                    getAuditListService()
                }
              }
           self.txtSearchfield.resignFirstResponder()
          }
          
          
       
          
          //=======================
          // Disable Pan gesture
          //========================
          func revealControllerPanGestureShouldBegin(_ revealController: SWRevealViewController!) -> Bool {
              return false
          }
        
          func revealController(_ revealController: SWRevealViewController!, didMoveTo position: FrontViewPosition) {
            
              if position == .left {
                
                if isReavel {
                    setLocalization()
                    getAuditListService()
                }else{
                     isReavel = true
                }
             }
          }
          
          
          //==========================
          // MARK:- Tableview methods
          //==========================
          
          func numberOfSections(in tableView: UITableView) -> Int {
              return self.arrOfFilterDict.count
          }
          
          func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
              let headerView = UIView()
              headerView.frame = CGRect(x: 0, y: 0, width: Int(self.tableView.frame.size.width), height: 30)
              headerView.backgroundColor = UIColor(red: 246.0/255.0, green: 242.0/255.0, blue: 243.0/255.0, alpha: 1.0)
              
              let headerLabel = UILabel(frame: CGRect(x: 14, y: 10, width:
                  headerView.bounds.size.width-20, height: 20))
              headerLabel.font = Font.ArimoBold(fontSize: 13.0)
              headerLabel.textColor = UIColor(red: 115.0/255.0, green: 125.0/255.0, blue: 126.0/255.0, alpha: 1.0)
              
              let dict = self.arrOfFilterDict[section]

              let firstKey = Array(dict.keys)[0]
              let arr = firstKey.components(separatedBy: ",")
              let att = changeColoreOFDate(main_string: firstKey, string_to_color: arr[0])
              
              if(arr[0] == "Today" || arr[0] == "Yesterday" || arr[0] == "Tomorrow" ) {
                  headerLabel.attributedText = att
              }else{
                  headerLabel.text = att.string
              }
              
              
              headerLabel.textAlignment = .left;
              
              DispatchQueue.main.async {
                  headerView.addSubview(headerLabel)
              }
              
              //headerView.addSubview(headerLabel)
              return headerView
          }
          
          
          func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
              return 30.0
          }
          
          func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
              return 103.0
          }
          
          func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) ->Int{
              
              
              if(self.arrOfFilterDict.count != 0){
                  let dict = self.arrOfFilterDict[section]
                  let firstKey = Array(dict.keys)[0] // or .first
                  let arr = dict[firstKey]
                  return arr!.count
              }else{
                  return 0
              }
          }
          
          
          func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
              
              let cell = tableView.dequeueReusableCell(withIdentifier: "cell") as! TaskTableViewCell
              cell.isUserInteractionEnabled = true
              let dict = self.arrOfFilterDict[indexPath.section]
              let firstKey = Array(dict.keys)[0] // or .first
              let arr = dict[firstKey]
              let audit = arr![indexPath.row]
           
              if selectedAuditID == audit.audId {
                  cell.rightView.backgroundColor = UIColor.init(red: 236.0/255.0, green: 244.0/255.0, blue: 245.0/255.0, alpha: 1.0)
                  cell.leftBaseView.backgroundColor = UIColor.init(red: 236.0/255.0, green: 244.0/255.0, blue: 245.0/255.0, alpha: 1.0)
              }else{
                  cell.rightView.backgroundColor = UIColor.white
                  cell.leftBaseView.backgroundColor = UIColor.white
              }
              
              if let auditID = audit.audId {
                  cell.name.text = "\(audit.label != nil ? audit.label! : "Apl\(auditID)" )"
              }

              
              var address = ""
              if let adr = audit.adr {
                  if adr != "" {
                      address = "\(adr)"
                  }
              }

              
              if  address != "" {
                  cell.taskDescription.attributedText =  lineSpacing(string: address.capitalizingFirstLetter(), lineSpacing: 5.0)
              }else{
                  cell.taskDescription.text = ""
              }
           
           if audit.schdlStart != "" {
                                    let tempTime = convertTimestampToDate(timeInterval: audit.schdlStart!)
                                    cell.time.text = tempTime.0
                                    cell.timeAMPM.text = tempTime.1
                                    
                                } else {
                                    cell.time.text = ""
                                    cell.timeAMPM.text = ""
                             }
           
              
              //temp code // if status are nil ....
            
            if let statusValue = audit.status {
                if statusValue != "" {
                    let status =
                     taskStatus(taskType: taskStatusType(rawValue: Int(statusValue == "0" ? "1" : statusValue)!)!)     //taskStatus(taskType: taskStatusType(rawValue: Int(job.status! == "0" ? "1" : job.status!)!)!)

                    if taskStatusType(rawValue: Int(statusValue == "0" ? "1" : statusValue)!)! == taskStatusType.InProgress{
                        cell.status.text = status.0
                        cell.leftBaseView.backgroundColor = UIColor(red: 109.0/255.0, green: 209.0/255.0, blue: 32.0/255.0, alpha: 1.0)
                        cell.status.textColor = UIColor.white
                        cell.timeAMPM.textColor = UIColor.white
                        cell.time.textColor = UIColor.white
                        cell.statusImage.image  = UIImage.init(named: "inprogress_white")
                    }else{

                        cell.status.text = status.0.replacingOccurrences(of: " Task", with: "")
                        cell.status.textColor = UIColor(red: 85.0/255.0, green: 85.0/255.0, blue: 85.0/255.0, alpha: 1.0)
                        cell.timeAMPM.textColor = UIColor(red: 85.0/255.0, green: 85.0/255.0, blue: 85.0/255.0, alpha: 0.6)
                        cell.time.textColor = UIColor(red: 85.0/255.0, green: 85.0/255.0, blue: 85.0/255.0, alpha: 0.7)
                        cell.statusImage.image  = status.1
                    }
                }else{
                    cell.status.text = ""
                    cell.status.textColor = UIColor(red: 85.0/255.0, green: 85.0/255.0, blue: 85.0/255.0, alpha: 1.0)
                    cell.timeAMPM.textColor = UIColor(red: 85.0/255.0, green: 85.0/255.0, blue: 85.0/255.0, alpha: 0.6)
                    cell.time.textColor = UIColor(red: 85.0/255.0, green: 85.0/255.0, blue: 85.0/255.0, alpha: 0.7)
                    cell.statusImage.image  = nil
                }
            }else{
                cell.status.text = ""
                cell.status.textColor = UIColor(red: 85.0/255.0, green: 85.0/255.0, blue: 85.0/255.0, alpha: 1.0)
                cell.timeAMPM.textColor = UIColor(red: 85.0/255.0, green: 85.0/255.0, blue: 85.0/255.0, alpha: 0.6)
                cell.time.textColor = UIColor(red: 85.0/255.0, green: 85.0/255.0, blue: 85.0/255.0, alpha: 0.7)
                cell.statusImage.image  = nil
            }
            
            
              
           
           
              //if user add job in OFFLINE mode and job not sync on the server
              let ladksj  = audit.audId!.components(separatedBy: "-")
              if ladksj.count > 0 {
                  let tempId = ladksj[0]
                  if tempId == "Job" {
                      
                      cell.name.textColor = UIColor.lightGray
                      //cell.lblTitle.textColor = UIColor.lightGray
                      cell.time.textColor = UIColor.lightGray
                      cell.timeAMPM.textColor = UIColor.lightGray
                      cell.status.textColor = UIColor.lightGray
                      cell.taskDescription.textColor = UIColor.red
                      cell.taskDescription.text = LanguageKey.job_not_sync
                      cell.isUserInteractionEnabled = false
                  }else{
                   
                      if audit.status != "7"{
                          cell.name.textColor =  UIColor.init(red: 115.0/255.0, green: 125.0/255.0, blue: 126.0/255.0, alpha: 1.0)
                          //cell.lblTitle.textColor = UIColor.init(red: 115.0/255.0, green: 125.0/255.0, blue: 126.0/255.0, alpha: 1.0)
                          cell.taskDescription.textColor = UIColor.init(red: 115.0/255.0, green: 125.0/255.0, blue: 126.0/255.0, alpha: 1.0)
                          cell.time.textColor = UIColor.init(red: 140.0/255.0, green: 146.0/255.0, blue: 147.0/255.0, alpha: 1.0)
                          cell.timeAMPM.textColor = UIColor.init(red: 140.0/255.0, green: 146.0/255.0, blue: 147.0/255.0, alpha: 1.0)
                          cell.status.textColor = UIColor.init(red: 115.0/255.0, green: 125.0/255.0, blue: 126.0/255.0, alpha: 1.0)
                      }
                  }
              }
              
              return cell
          }
          
          func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
              
              if (selectedCell != nil) {
                  //If selected cell exist on visible indexpaths
                  let isExist = tableView.indexPathsForVisibleRows?.contains(selectedCell!)
                  if isExist!{
                      let cellPrevious = tableView.cellForRow(at: selectedCell!) as! TaskTableViewCell
                      if previousInProgress ==  false {
                          cellPrevious.rightView.backgroundColor = UIColor.white
                          cellPrevious.leftBaseView.backgroundColor = UIColor.white
                      }else{
                          cellPrevious.rightView.backgroundColor = UIColor.white
                      }
                  }
              }
              
              
              
              //Get Job ID
              let dict = self.arrOfFilterDict[indexPath.section]
              let firstKey = Array(dict.keys)[0] // or .first
              let arr = dict[firstKey]
              let quote = arr![indexPath.row]
              selectedAuditID = quote.audId
              
              
              let cell = tableView.cellForRow(at: indexPath) as! TaskTableViewCell
              
              if quote.status != "7" {
                  previousInProgress = false
                  cell.leftBaseView.backgroundColor = UIColor.init(red: 236.0/255.0, green: 244.0/255.0, blue: 245.0/255.0, alpha: 1.0)
              }else{
                  previousInProgress = true
              }
              self.selectedCell = indexPath
              cell.rightView.backgroundColor = UIColor.init(red: 236.0/255.0, green: 244.0/255.0, blue: 245.0/255.0, alpha: 1.0)
      
          }
          
      
          func resetFilterOptions() -> Void {
              searchTxt = ""
              
               self.clearFilterChips()
              
              self.selectedStatus = []
              self.selectedDateRange = nil
              self.customEndDate = nil
              self.customStartDate = nil
          }
       
       @IBAction func btnPressedSort(_ sender: UIButton) {
       }
       
       @IBAction func btnResetForFilter(_ sender: Any) {
    
                
       }
       
       @IBAction func filterBtn(_ sender: Any) {
       }
       
       @IBAction func tapOnSelectedSortButton(_ sender: UIButton) {
           
       }
          
          @IBAction func pressedResetButton(_ sender: Any) {
              searchVw_H.constant = 0.0
              UIView.animate(withDuration: 0.5){
                  self.view.layoutIfNeeded()
              }
              resetFilterOptions()
              getAuditListService()
          }
          
          func clearFilterChips() -> Void {
              
          }
          
          //===============================
          // MARK:- Data - Passing method
          //===============================
          override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
              
           if segue.identifier == "ShowAuditTab" {
               if let indexPath = tableView.indexPathForSelectedRow {
                   jobTabVC = (segue.destination as! AuditTabController)
                   var dict = self.arrOfFilterDict[indexPath.section]
                   let firstKey = Array(dict.keys)[0] // or .first
                   var arr = dict[firstKey]
                   jobTabVC!.jobs = arrOFUserData
                   jobTabVC!.objOfUserJobList = arr![indexPath.row]
                   jobTabVC!.callback = {(isDelete : Bool, object : NSManagedObject) -> Void in
                       if isDelete{
                           DispatchQueue.main.async {
                               arr?.remove(at: indexPath.row)
                               dict[firstKey] = arr
                               self.arrOfFilterDict[indexPath.section] = dict
                               
                               
                               self.isAdded = true
                               self.isChanged =  false
                               
                               //self.getJobListFromDB()
                               
                               self.jobTabVC!.navigationController?.popViewController(animated: true)
                               self.jobTabVC = nil
                           }
                       }
                   }
               }
           }
          }
          
      
          
          //===============================
          // MARK:- CollectionView methods
          //===============================
          func numberOfSections(in collectionView: UICollectionView) -> Int {
              return 1
          }
          
          func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
              return filterTitleArray.count
          }
          
          func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
              let cell = collectionVw.dequeueReusableCell(withReuseIdentifier: "jobCollCell", for: indexPath)as! jobCollectionCell
              
              let statusType : Int = filterTitleArray[indexPath.row].rawValue
              if filterjobsArray.firstIndex(of:statusType) != nil {
                  cell.contentView.backgroundColor = UIColor(red: 226.0/255.0, green: 226.0/255.0, blue: 226.0/255.0, alpha: 1.0)
              }else{
                  cell.contentView.backgroundColor = UIColor.clear
              }
              
              let statusData = taskStatus(taskType: filterTitleArray[indexPath.row])
              cell.lblTask.text = statusData.0.replacingOccurrences(of: " Task", with: "")
              cell.imgVw.image = statusData.1
              return cell
          }
          
          func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
              
              let selectedCell:UICollectionViewCell = collectionVw.cellForItem(at: indexPath)!
              selectedCell.contentView.backgroundColor = UIColor(red: 226.0/255.0, green: 226.0/255.0, blue: 226.0/255.0, alpha: 1.0)
              
              let statusType : Int = filterTitleArray[indexPath.row].rawValue
              
              if let index = filterjobsArray.firstIndex(of:statusType) {
                  selectedCell.contentView.backgroundColor = UIColor.clear
                  filterjobsArray.remove(at: index)
              }else{
                  filterjobsArray.append(statusType)
              }
              filterDataFromDB()
          }
          
          
          func filterDataFromDB() -> Void {
              let query = getQuery(arry: filterjobsArray)
              showDataOnTableView(query: query == "" ? nil : query)
          }
          
          
          func collectionView(_ collectionView: UICollectionView,
                              layout collectionViewLayout: UICollectionViewLayout,
                              sizeForItemAt indexPath: IndexPath) -> CGSize {
              let availableWidth = view.frame.width
              let widthPerItem = availableWidth / 4
              return CGSize(width: widthPerItem, height: widthPerItem)
          }
          
          func getQuery(arry : [Int]) -> String {
              var query  = ""
              for status in filterjobsArray {
                  var str = "status = \(status)"
                  
                  if status == taskStatusType.Accepted.rawValue{
                      str = "status = \(taskStatusType.Accepted.rawValue) OR status = \(taskStatusType.Travelling.rawValue) OR status = \(taskStatusType.Break.rawValue)"
                  }
                  
                  if status == taskStatusType.OnHold.rawValue{
                      str = "status = \(taskStatusType.OnHold.rawValue)"
                  }
              
                  
                  if query == "" {
                      query = str
                  }else{
                      query = "\(query) OR \(str)"
                  }
              }
              return query
          }
       
          
          //==================================
          // MARK:- Audit LIST Service methods
          //==================================
          func getAuditListService(){
              
              if !isHaveNetowork() {
                ShowError(message: AlertMessage.networkIssue, controller: windowController)
                hideloader()
                  return
              }
              
              var dates = ("","")
              if selectedDateRange != nil{
                  dates = getDateFromStatus(dateRange: selectedDateRange!)
              }
              let param = Params()
              param.compId = getUserDetails()?.compId
              param.usrId = getUserDetails()?.usrId
              param.limit = ContentLimit
              param.index = "0"
              param.search = searchTxt
              param.dtf = dates.0
              param.dtt = dates.1
              var dict = param.toDictionary
              dict!["status"] = selectedStatus
            
            
              serverCommunicator(url: Service.getAuditList, param: dict) { (response, success) in
                  
                
                  if(success){
                      let decoder = JSONDecoder()
                      
                      if let decodedData = try? decoder.decode(AuditListResponse.self, from: response as! Data) {
                        
                       
                        
                       if decodedData.success == true{
                           
                           if self.count == 0 {
                               self.arrOFUserData.removeAll()
                           }
                           
                           if let auditArry = decodedData.data{
                                   self.arrOFUserData = auditArry
                                   self.showDataOnTableView(query: nil)
                            
                           }else{
                               self.showDataOnTableView(query : "")
                           }
                       }else{
                        
                             self.hideloader()
                              if let code =  decodedData.statusCode{
                                  if(code == "401"){
                                      ShowAlert(title: getServerMsgFromLanguageJson(key: decodedData.message!), message:"" , controller: windowController, cancelButton: LanguageKey.ok as NSString, okButton: nil, style: .alert, callback: { (Ok, Cancel) in
                                          if (Ok){
                                              DispatchQueue.main.async {
                                                  (UIApplication.shared.keyWindow?.rootViewController as! UINavigationController).popViewController(animated: true)
                                              }
                                          }
                                      })
                                  }
                              }else{
                                  ShowError(message: getServerMsgFromLanguageJson(key: decodedData.message!)!, controller: windowController)
                              }
                          }
                      }else{
                        self.hideloader()
                          ShowAlert(title: AlertMessage.formatProblem, message: "", controller: windowController, cancelButton: LanguageKey.ok as NSString, okButton: nil, style: UIAlertController.Style.alert, callback: {(cancel,done) in
                              
                              if cancel {
                                  showLoader()
                                self.getAuditListService()
                              }
                          })
                      }
                  }else{
                    self.hideloader()
                      ShowAlert(title: errorString, message: "", controller: windowController, cancelButton: LanguageKey.ok as NSString, okButton: nil, style: UIAlertController.Style.alert, callback: { (cancelButton, okButton) in
                          if cancelButton {
                              showLoader()
                              self.getAuditListService()
                          }
                      })
                  }
              }
          }
        
        
        func hideloader() -> Void {
            DispatchQueue.main.async {
                if self.refreshControl.isRefreshing {
                    self.refreshControl.endRefreshing()
                }
            }

            killLoader()
        }
       
       
          func showDataOnTableView(query : String?) -> Void {

              if arrOFUserData.count != 0 {
                  self.createSection ()
              }else{
                  DispatchQueue.main.async {
                      if(self.arrOfFilterDict.count != 0){
                          self.arrOfFilterDict.removeAll()
                      }
                      self.tableView.reloadData()
                      self.hideloader()

                }
              }
              
              DispatchQueue.main.async {
                  self.lblNoJob.isHidden = self.arrOFUserData.count > 0 ? true : false
              }
          }
       
           // Barcode Api Service
       
          func getEquipmentListFromBarcodeScanner(barcodeString : String) -> Void {
               //showLoader()
            
            
            if !isHaveNetowork() {
                ShowError(message: AlertMessage.networkIssue, controller: windowController)
                hideloader()
                return
            }
            
              let param = Params()
              param.audId = ""
              param.barCode = barcodeString
              param.search = searchTxt
            
              serverCommunicator(url: Service.getEquipmentInfoByBarcode, param: param.toDictionary) { (response, success) in
               
               DispatchQueue.main.async {
                   self.refreshControl.endRefreshing()
               }
                   
                  if(success){
                      let decoder = JSONDecoder()
                     
                          if let decodedData = try? decoder.decode(AuditListResponse.self, from: response as! Data) {
                              if decodedData.success == true{
                                      if let audits = decodedData.data{
                                       self.arrOFUserData = audits
                                        self.createSection()
                                      }
                              }else{
                                self.hideloader()
                                  self.showToast(message: getServerMsgFromLanguageJson(key: decodedData.message!)!)
                              }
                          }else{
                            self.hideloader()
                    }
                 }
              }
          }
          
          //=====================================
          // MARK:- SECTIONS for JOBLIST
          //=====================================
          
          func createSection(){

            
                   var arrOFData = [AuditListData]()
                   var filterDict = [String : [AuditListData]]()
                   var LatestFilterDict  = [[String : [AuditListData]]]()
            
                  var currentDate = ""

                  self.arrOFUserData = self.arrOFUserData.sorted(by: { ($0.createDate ?? "") > ($1.createDate ?? "") })

                  for  objOfUserData in self.arrOFUserData{
                      let strDate = dayDifference(unixTimestamp: objOfUserData.createDate ?? "")

                      if(LatestFilterDict.count > 0){

                          // Below is new change implemented by Hemant
                          if currentDate == strDate {
                              var dictObj = LatestFilterDict.last
                              dictObj![strDate]?.append(objOfUserData)
                              LatestFilterDict[LatestFilterDict.count-1] = dictObj!
                          }else{
                              currentDate = strDate
                              arrOFData.removeAll()
                              filterDict.removeAll()
                              arrOFData.append(objOfUserData)
                              filterDict[strDate] = arrOFData
                              LatestFilterDict.append(filterDict)
                          }
                      }else{
                          currentDate = strDate
                          arrOFData.append(objOfUserData)
                          filterDict[strDate] = arrOFData
                          LatestFilterDict.append(filterDict)
                      }
                  }

                      DispatchQueue.main.async{
                           self.arrOfFilterDict = LatestFilterDict
                           self.tableView.reloadData()
                           self.hideloader()
                      }
          }
          

          @IBAction func collectionEnableBtnTapped(_ sender: UIButton) {

          }
          
          func getDateFromStatus(dateRange : DateRange) -> (String,String) {
              switch dateRange {
                  
                      case .Today:
                          let fromDate = convertDateToStringForServer(date: Date(), dateFormate: DateFormate.fromDateFormate)
                          let toDate = convertDateToStringForServer(date: Date(), dateFormate: DateFormate.toDateFormate)
                          //print(fromDate,toDate)
                          return (fromDate,toDate)
                  
                      case .Yesterday:
                          let calender = Calendar.current
                          let date = calender.date(byAdding: .day, value: -1, to: Date())
                          let fromDate = convertDateToStringForServer(date: date!, dateFormate: DateFormate.fromDateFormate)
                          let toDate = convertDateToStringForServer(date: date!, dateFormate: DateFormate.toDateFormate)
                      
                          //print(fromDate,toDate)
                          return (fromDate,toDate)
                  
                      case .Last7Days:
                          let calender = Calendar.current
                          let date = calender.date(byAdding: .day, value: -6, to: Date())
                          let fromDate = convertDateToStringForServer(date: date!, dateFormate: DateFormate.fromDateFormate)
                          let toDate = convertDateToStringForServer(date: Date(), dateFormate: DateFormate.toDateFormate)
                          
                         /// print(fromDate,toDate)
                          return (fromDate,toDate)
                  
                      case .Last30Days:
                          let calender = Calendar.current
                          let date = calender.date(byAdding: .day, value: -29, to: Date())
                          let fromDate = convertDateToStringForServer(date: date!, dateFormate: DateFormate.fromDateFormate)
                          let toDate = convertDateToStringForServer(date: Date(), dateFormate: DateFormate.toDateFormate)
                          
                          //print(fromDate,toDate)
                          return (fromDate,toDate)
                  
                      case .ThisMonth:
                          let calendar = Calendar.current
                          let components = calendar.dateComponents([.year, .month], from: Date())
                          let startOfMonth = calendar.date(from: components)
                          
                          
                          var comps2 = DateComponents()
                          comps2.month = 1
                          comps2.day = -1
                          let endOfMonth = calendar.date(byAdding: comps2, to: startOfMonth!)
                          
                          let fromDate = convertDateToStringForServer(date: startOfMonth!, dateFormate: DateFormate.fromDateFormate)
                          let toDate = convertDateToStringForServer(date: endOfMonth!, dateFormate: DateFormate.toDateFormate)
                       
                          //print(fromDate,toDate)
                          return (fromDate,toDate)
                  
                       case .LastMonth:
                          let calendar = Calendar.current
                          var components = calendar.dateComponents([.year, .month], from: Date())
                          components.month = components.month! - 1
                          let startOfMonth = calendar.date(from: components)
                          
                          
                          var comps2 = DateComponents()
                          comps2.month = 1
                          comps2.day = -1
                          let endOfMonth = calendar.date(byAdding: comps2, to: startOfMonth!)
                          
                          let fromDate = convertDateToStringForServer(date: startOfMonth!, dateFormate: DateFormate.fromDateFormate)
                          let toDate = convertDateToStringForServer(date: endOfMonth!, dateFormate: DateFormate.toDateFormate)
                          
                          //print(fromDate,toDate)
                          return (fromDate,toDate)
                  
                      case .CustomRange:
                          let fromDate = convertDateToStringForServer(date: customStartDate!, dateFormate: DateFormate.fromDateFormate)
                          let toDate = convertDateToStringForServer(date: customEndDate!, dateFormate: DateFormate.toDateFormate)
                         // print(fromDate,toDate)
                          return (fromDate,toDate)
                     }
          }
          
      }
      

   
   
