//
//  EditContactVC.swift
//  EyeOnTask
//
//  Created by Apple on 14/05/18.
//  Copyright Â© 2018 Hemant. All rights reserved.
//

import UIKit
import IQKeyboardManagerSwift

class AddContact: UIViewController , UITextFieldDelegate {
    var objOFClient : ClientList?
       var sltIdex : Int?
    
    
    @IBOutlet weak var btnSubmit: UIButton!
    @IBOutlet var txtField_Name: UITextField!
    @IBOutlet var txtField_Email: UITextField!
    @IBOutlet var txtField_mobNo: UITextField!
    @IBOutlet var txtField_AltMobNo: UITextField!
    @IBOutlet var txtField_Fax: UITextField!
    @IBOutlet var txtField_Skype: UITextField!
    @IBOutlet var txtField_Twitter: UITextField!
    
    @IBOutlet weak var btnDefault: UIButton!
    @IBOutlet weak var scrollVw: UIScrollView!
    var callbackForContactVC: ((Bool,Bool) -> Void)?

    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        if Constants.kIphone_5 || Constants.kIphone_4s {
            self.scrollVw.isScrollEnabled = true
        }
        setLocalization()
    }
    
    func setLocalization() -> Void {
        self.navigationItem.title = LanguageKey.add_contacts_screen_title
        txtField_Name.placeholder = "\(LanguageKey.contact_name) *"
        txtField_Email.placeholder = "\(LanguageKey.email) *"
        txtField_mobNo.placeholder = "\(LanguageKey.mob_no) *"
        txtField_AltMobNo.placeholder = LanguageKey.alt_mobile_number
        txtField_Fax.placeholder = LanguageKey.fax
        txtField_Skype.placeholder = LanguageKey.skype
        txtField_Twitter.placeholder = LanguageKey.twitter
        btnDefault.setTitle(LanguageKey.default_contact , for: .normal)
        btnSubmit.setTitle(LanguageKey.create_contact , for: .normal)
        
        ActivityLog(module:Modules.contact.rawValue , message: ActivityMessages.clientContactAdd)

    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(true)
        //self.navigationController?.navigationBar.topItem?.title = "";
    }

    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        if (textField == txtField_mobNo) || (textField == txtField_AltMobNo){
            if (string != "") && (textField.text?.count)! > 14 {
                return false
            }
            
            let aSet = NSCharacterSet(charactersIn:"0123456789").inverted
            let compSepByCharInSet = string.components(separatedBy: aSet)
            let numberFiltered = compSepByCharInSet.joined(separator: "")
            return string == numberFiltered
        }
        return true
    }

    
    @IBAction func updateBtnAction(_ sender: Any) {
        let siteName = txtField_Name.text?.trimmingCharacters(in: .whitespacesAndNewlines)
        if siteName?.lowercased() == "self"{
            let mess = AlertMessage.do_not_use_this_name
            let newString = mess.replacingOccurrences(of: EOT_VAR, with: "'\(txtField_Name.text!)'")
            ShowError(message: newString, controller: windowController)
            return
        }
               
               
        
        let trimmMobNo = trimString(string: self.txtField_mobNo.text!)
         let trimmAltMobNo = trimString(string: self.txtField_AltMobNo.text!)
         
         if (trimmMobNo.count > 0) && (trimmMobNo.count < 8) {
             ShowError(message: AlertMessage.validMobile, controller: windowController)
                 return
             }
         
         
         if trimmAltMobNo.count > 0 && trimmAltMobNo.count < 8  {
             ShowError(message: AlertMessage.validAlMobileNo, controller: windowController)
                 return
             }
        
        
        
        if(txtField_Name.text?.trimmingCharacters(in: .whitespacesAndNewlines) != ""){
            if isValidEmail(testStr: txtField_Email.text!) {
                if (txtField_mobNo.text!.count >= 8){
                    self.addUserContact()
                }else{
                    ShowError(message: AlertMessage.validMobileNo , controller: windowController)
                }
            }else{
                ShowError(message: AlertMessage.enterValidEmail, controller: windowController)
            }
        }else{
            ShowError(message: AlertMessage.enterClientName, controller: windowController)
        }
    }
    
    func getTempIdForNewContact(newId : Int) -> String {
        
        return "Contact-\(String(describing: getUserDetails()?.usrId ?? ""))-\(getCurrentTimeStamp())"
        
//        let searchQuery = "conId = 'Con-\(newId)'"
//        let isExist = DatabaseClass.shared.fetchDataFromDatabse(entityName: "ClientContactList", query: searchQuery) as! [ClientContactList]
//        if isExist.count == 0 {
//            return "Con-\(newId)"
//        }else{
//            return getTempIdForNewContact(newId: newId + 1)
//        }
    }
    
    //=====================================
    // MARK:- Get Contact List  Service
    //=====================================
    
    func addUserContact(){
        /*
         cltId -> client id
         cnm -> contact name
         email -> email
         mob1 -> mobile no-1
         mob2 -> mobile no- 2
         fax -> fax number
         twitter -> twitter id
         skype -> skype id
         */

        let param = Params()
        let temp = getTempIdForNewContact(newId: 0)
        param.tempId = temp
        param.conId = temp
        param.cltId = objOFClient?.cltId
        param.cnm = txtField_Name.text?.trimmingCharacters(in: .whitespacesAndNewlines)
        param.email = txtField_Email.text?.trimmingCharacters(in: .whitespacesAndNewlines)
        param.mob1 = txtField_mobNo.text?.trimmingCharacters(in: .whitespacesAndNewlines)
        param.mob2 = txtField_AltMobNo.text?.trimmingCharacters(in: .whitespacesAndNewlines)
        param.fax = txtField_Fax.text?.trimmingCharacters(in: .whitespacesAndNewlines)
        param.twitter = txtField_Twitter.text?.trimmingCharacters(in: .whitespacesAndNewlines)
        param.skype = txtField_Skype.text?.trimmingCharacters(in: .whitespacesAndNewlines)
        param.def = btnDefault.imageView?.image == UIImage.init(named: "BoxOFCheck") ? "1" : "0"
        
        
        //ADD in LOCAL DATABASE
        let userJobs = DatabaseClass.shared.createEntity(entityName: "ClientContactList")
        userJobs?.setValuesForKeys(param.toDictionary!)
        
        
        //if user selected default contact, Change all contact are non-default and current is defualt,
        var isDefault = Bool()
        if param.def == "1"{
            
            //Change Address for client list for default
            objOFClient?.mob1 = param.mob1
            objOFClient?.mob2 = param.mob2
            objOFClient?.email = param.email
            
            isDefault = true
        }
        if self.callbackForContactVC != nil {
            self.callbackForContactVC!(true,isDefault)
        }
        
        DatabaseClass.shared.saveEntity(callback: {isSuccess in
            param.tempId = param.conId
            param.compId = getUserDetails()?.compId
            
            //Call Service
            
            showToast(message: AlertMessage.contactAdd) //Alert message
            
            DatabaseClass.shared.saveOffline(service: Service.addClientContact, param: param)
            
            self.navigationController?.popViewController(animated: true)
        })
}
  

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    

    @IBAction func btnDefaultPressed(_ sender: Any) {
   
        if btnDefault.imageView?.image == UIImage.init(named: "BoxOFCheck") {
            btnDefault.setImage(UIImage(named:"BoxOFUncheck"), for: .normal)
        }else{
            btnDefault.setImage(UIImage(named:"BoxOFCheck"), for: .normal)
        }
    }
    
    //========================================
    //MARK:-  Stop Copy Paste of Numbers Filed
    //========================================
    
    override func canPerformAction(_ action: Selector, withSender sender: Any?) -> Bool {
        if txtField_mobNo.isFirstResponder || txtField_AltMobNo.isFirstResponder || txtField_Fax.isFirstResponder {
            DispatchQueue.main.async(execute: {
                (sender as? UIMenuController)?.setMenuVisible(false, animated: false)
            })
            return false
        }
        
        return super.canPerformAction(action, withSender: sender)
    }
    
}
