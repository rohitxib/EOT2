//
//  EmailInvoiceVC.swift
//  EyeOnTask
//
//  Created by Mac on 30/04/19.
//  Copyright Â© 2019 Hemant. All rights reserved.
//

import UIKit

class EmailInvoiceVC: UIViewController {
    
    @IBOutlet weak var lblMessage: UILabel!
    @IBOutlet weak var to_TxtFld: FloatLabelTextField!
    @IBOutlet weak var cc_TxtFld: FloatLabelTextField!
    @IBOutlet weak var sub_TxtFld: FloatLabelTextField!
    @IBOutlet weak var msg_TxtView: UITextView!
    var isInvoice = true
    var invoiceid = String()
    var emailRes = EmailInvoiceResponse()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.title = isInvoice ? LanguageKey.email_invoice : LanguageKey.email_quote
        sub_TxtFld.placeholder = LanguageKey.subject
        to_TxtFld.placeholder = LanguageKey.to
        cc_TxtFld.placeholder = LanguageKey.cc
        lblMessage.text = LanguageKey.message
        
        getInvoiceRecord()
    }
    
    @objc func addTapped(){
        
        let  trimmedUserNmStr  = to_TxtFld.text?.trimmingCharacters(in: .whitespacesAndNewlines)
        let  trimmedUserMsg  = msg_TxtView.text?.trimmingCharacters(in: .whitespacesAndNewlines)
        let  trimmedUserSub  = sub_TxtFld.text?.trimmingCharacters(in: .whitespacesAndNewlines)
       // let  trimmedUsercc = cc_TxtFld.text?.trimmingCharacters(in: .whitespacesAndNewlines)
        
        if isValidEmail(testStr: trimmedUserNmStr!)  {
        //  if isValidEmail(testStr: trimmedUserCc!) {
            if trimmedUserNmStr != "" {
                self.to_TxtFld.resignFirstResponder()
                if trimmedUserSub != "" {
                    self.sub_TxtFld.resignFirstResponder()
                   if trimmedUserMsg != "" {
                       self.msg_TxtView.resignFirstResponder()
                
                         self.sendInvoiceEmailTemplate()
                    
                        }  else{
                    
                    ShowAlert(title: "", message: AlertMessage.message, controller: self, cancelButton: LanguageKey.ok as NSString, okButton: nil, style: .alert, callback: {_,_ in})
                  }
                    
                } else{
                    ShowAlert(title: "", message: AlertMessage.subject, controller: self, cancelButton: LanguageKey.ok as NSString, okButton: nil, style: .alert, callback: {_,_ in})
                }
            }
             else{
                
                ShowAlert(title: "", message: AlertMessage.userId, controller: self, cancelButton: LanguageKey.ok as NSString, okButton: nil, style: .alert, callback: {_,_ in})
              }
                
                
       //  } else{
       //          ShowAlert(title: "", message: AlertMessage.validEmailid, controller: self, cancelButton: "OK", okButton: nil, style: .alert, callback: {_,_ in})
       //     }
                
                
        } else{
            ShowAlert(title: "", message: trimmedUserNmStr != "" ? AlertMessage.validEmailid : AlertMessage.userId, controller: self, cancelButton: LanguageKey.ok as NSString, okButton: nil, style: .alert, callback: {_,_ in})
        }
        
        
    }
   override func viewWillAppear(_ animated: Bool) {

    let image = UIImage(named:"send_icon-1")
    let leftButton = UIBarButtonItem(image: image, style: .plain, target: self, action: #selector(addTapped))
    self.navigationItem.rightBarButtonItem = leftButton
    
    }
  
    //======================================================
    // MARK:- getInvoiceEmailTemplate
    //======================================================
    
    func getInvoiceRecord() {
        
//        "invId -> Invoice Id
//        compId -> Company Id"
        showLoader()
        let param = Params()
        param.compId = getUserDetails()?.compId
        
        if isInvoice {
            param.invId =  invoiceid
        }else{
            param.quotId =  invoiceid
        }
        
        let url = isInvoice ? Service.getInvoiceEmailTemplate : Service.getQuotationEmailTemplate
        
        serverCommunicator(url: url, param: param.toDictionary) { (response, success) in
                        killLoader()
                        if(success){
                            let decoder = JSONDecoder()
                            if let decodedData = try? decoder.decode(EmailInvoiceResponse.self, from: response as! Data) {
            
                                if decodedData.success == true{
            
                                    self.emailRes = decodedData
                                    
                                    let html = self.emailRes.data?.message
                                    let data = Data(html!.utf8)
                                    
                                    if let attributedString = try? NSAttributedString(data: data, options: [.documentType: NSAttributedString.DocumentType.html,.characterEncoding:String.Encoding.utf8.rawValue], documentAttributes: nil) {
                                      
                                     DispatchQueue.main.async {
                                        self.msg_TxtView.attributedText = attributedString
                                        self.sub_TxtFld.text = self.emailRes.data?.subject
                                        self.to_TxtFld.text = self.emailRes.data?.to
                                    }
                                   }
                               }
                            }else{
            
                                ShowError(message: AlertMessage.formatProblem, controller: windowController)
                            }
                        }else{
                            //ShowError(message: "Please try again!", controller: windowController)
                        }
                    }
               }
    

    func sendInvoiceEmailTemplate() {
        
        //    "message -> mail body
        //    subject -> mail subject
        //    to -> reciepent email id
        //    cc -> cc email id
        //    bcc -> bcc email id
        //    from -> from email id
        //    fromnm -> from name
        //    invId -> Invoice Id
        //    compId -> Company Id"
        
        let mailString = self.msg_TxtView.text.replacingOccurrences(of: "\n", with: "<br>")
        
        showLoader()
        let param = Params()
        param.message = mailString
        param.subject = self.sub_TxtFld.text!
        param.to = self.to_TxtFld.text!
        param.cc =  self.cc_TxtFld.text!
        param.bcc =  ""
        param.from =  emailRes.data?.from
        param.fromnm = emailRes.data?.fromnm
        param.compId = getUserDetails()?.compId
        
        
        if isInvoice {
            param.invId =  invoiceid
        }else{
            param.quotId =  invoiceid
        }
        
       
        
        
        let url = isInvoice ? Service.sendInvoiceEmailTemplate : Service.sendQuotationEmailTemplate
        
        serverCommunicator(url: url, param: param.toDictionary) { (response, success) in
             killLoader()
            if(success){
                let decoder = JSONDecoder()
                if let decodedData = try? decoder.decode(EmailInvoiceResponse.self, from: response as! Data) {
                    
                    if decodedData.success == true{
                        
                        self.emailRes = decodedData
                        
                        DispatchQueue.main.async {
                            ShowError(message: getServerMsgFromLanguageJson(key: decodedData.message!)!, controller: windowController)
                            self.navigationController?.popViewController(animated: true)
                        }
                    }else{
                        ShowError(message: getServerMsgFromLanguageJson(key: decodedData.message!)!, controller: windowController)
                    }
                   
                }else{
                    
                    ShowError(message: AlertMessage.formatProblem, controller: windowController)
                }
            }else{
                //ShowError(message: "Please try again!", controller: windowController)
            }
        }
            
     }
}

