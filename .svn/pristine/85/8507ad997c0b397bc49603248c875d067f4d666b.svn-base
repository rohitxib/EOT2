 //
//  ClientDetailVC.swift
//  EyeOnTask
//
//  Created by Hemant Pandagre on 08/05/18.
//  Copyright Â© 2018 Hemant. All rights reserved.
//

import UIKit

class ClientDetailVC: UIViewController {

    
    
    
    @IBOutlet weak var lblNoteDesView: UILabel!
    @IBOutlet weak var btnOkDesView: UIButton!
    @IBOutlet weak var btnView: UIButton!
    @IBOutlet weak var lblNote: UILabel!
    @IBOutlet weak var lblIndustry: UILabel!
    @IBOutlet weak var lblTinNo: UILabel!
    
    @IBOutlet weak var lblGst: UILabel!
    @IBOutlet weak var lblAccountTyp: UILabel!
    @IBOutlet weak var lblAccountDtl: UILabel!
    
    @IBOutlet weak var lblClientDetail: UILabel!
    @IBOutlet weak var lblAddressUp: UILabel!
    @IBOutlet weak var lblClientName: UILabel!
    @IBOutlet var addressLbl: UILabel!
    
    var clientDetails : ClientList?
//lblClientNamelower
    @IBOutlet weak var lblClientNamelower: UILabel!
    
    @IBOutlet weak var lblAddress: UILabel!
    @IBOutlet weak var lblMobile1: UILabel!
    @IBOutlet weak var lblMobile2: UILabel!
    @IBOutlet weak var lblEmail: UILabel!
    @IBOutlet weak var lblAccountType: UILabel!
    @IBOutlet var descriptionLbl: UILabel!
    @IBOutlet var descriptionView: UIView!
    @IBOutlet var textDescriptionView: UITextView!
    @IBOutlet weak var lblGST: UILabel!
    @IBOutlet var backgroundView: UIView!

    @IBOutlet weak var lblTIN: UILabel!
    
    @IBOutlet weak var lblInsdustry: UILabel!
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
       
        
      let swipeRight = UISwipeGestureRecognizer(target: self, action: #selector(swiped))
        swipeRight.direction = UISwipeGestureRecognizer.Direction.right
        self.view.addGestureRecognizer(swipeRight)
        
        let swipeLeft = UISwipeGestureRecognizer(target: self, action: #selector(swiped))
        swipeLeft.direction = UISwipeGestureRecognizer.Direction.left
        self.view.addGestureRecognizer(swipeLeft)
        setLocalization()
        
        ActivityLog(module:Modules.client.rawValue , message: ActivityMessages.clientDetails)
    }
    
    func setLocalization() -> Void {
       // self.navigationItem.title = LanguageKey.client_details
        lblClientNamelower.text = LanguageKey.client_name
        lblAddressUp.text = LanguageKey.address
        lblClientDetail.text = LanguageKey.client_details
        lblAccountDtl.text = LanguageKey.account_details
        lblAccountTyp.text = "\(LanguageKey.Account_type) :"
        lblGst.text = "\(LanguageKey.gst_no) :"
        lblTinNo.text = "\(LanguageKey.tin_no) :"
        lblIndustry.text = "\(LanguageKey.industry) :"
        lblNote.text = LanguageKey.notes
        lblNoteDesView.text = LanguageKey.notes
        btnOkDesView.setTitle(LanguageKey.ok , for: .normal)
        btnView.setTitle(LanguageKey.view , for: .normal)
       
        
        
    }
    
    @objc func addTapped() -> Void {
        performSegue(withIdentifier: "EditClient", sender: nil)
    }
    

    override func viewWillAppear(_ animated: Bool) {
        
//        self.parent?.navigationItem.rightBarButtonItem?.tintColor = UIColor.white
//        self.parent?.navigationItem.rightBarButtonItem?.isEnabled = true
//
        let image = UIImage(named:"Edit.png")
//        self.parent?.navigationItem.rightBarButtonItem = UIBarButtonItem(image: image, style: .plain, target: self, action: #selector(addTapped))
        
        if let button = self.parent?.navigationItem.rightBarButtonItem {
            button.isEnabled = true
            button.tintColor = UIColor.white
            self.parent?.navigationItem.rightBarButtonItem?.target = self
            self.parent?.navigationItem.rightBarButtonItem?.action = #selector(addTapped)
            self.parent?.navigationItem.rightBarButtonItem?.image = image
        }else{
            self.parent?.navigationItem.rightBarButtonItem = UIBarButtonItem(image: image, style: .plain, target: self, action: #selector(addTapped))
        }
        
        
        self.parent?.title = LanguageKey.client_details
        lblClientName.text = clientDetails?.nm?.capitalizingFirstLetter() ?? ""
        let queryOFSiteAndContact = "cltId = '\(clientDetails?.cltId! ?? "")' && def = 1 "
        let isExistSite = DatabaseClass.shared.fetchDataFromDatabse(entityName: "ClientSitList", query: queryOFSiteAndContact) as? [ClientSitList]
       if isExistSite?.count != 0 && isExistSite != nil {
          let cltSiteDetails = isExistSite![0]
          let address = cltSiteDetails.adr?.capitalizingFirstLetter()
          lblAddress.attributedText =  lineSpacing(string: address!, lineSpacing: 7.0)
        }else{
            lblAddress.text = ""
        }
        
//        if let addressString = clientDetails?.adr {
//            lblAddress.attributedText =  lineSpacing(string: addressString, lineSpacing: 7.0)
//        }else{
//            lblAddress.text = ""
//        }
        
         let isExist = DatabaseClass.shared.fetchDataFromDatabse(entityName: "ClientContactList", query: queryOFSiteAndContact) as? [ClientContactList]
        if  isExist?.count != 0 && isExist != nil{
            
            let cltContactDetails = isExist![0]
            lblMobile1.text = cltContactDetails.mob1 ?? ""
            lblMobile2.text = cltContactDetails.mob2 ?? ""
            lblEmail.text = cltContactDetails.email ?? ""
            
        }else{
            lblMobile1.text =  ""
            lblMobile2.text =  ""
            lblEmail.text =  ""
        }
        
        
       
        
        
        let result = clientDetails?.pymtType
        var query = ""
        if result != nil && result != "" {
            query = "accId = '\(result!)'"
        }
        let arrOfObj = DatabaseClass.shared.fetchDataFromDatabse(entityName: "UserAccType", query: query == "" ? nil : query) as! [UserAccType]
        
        if arrOfObj.count > 0{
            lblAccountType.text = arrOfObj[0].type ?? ""
        }else{
            lblAccountType.text = ""
        }
        
        
        lblGST.text = clientDetails?.gstNo
        lblTIN.text = clientDetails?.tinNo
       // descriptionLbl.text = clientDetails?.note
        
        if let desString = clientDetails?.note {
            descriptionLbl.attributedText =  lineSpacing(string: desString, lineSpacing: 4.0)
            if trimString(string: descriptionLbl.text!) == "" {
                 btnView.isHidden = true
            }
        }else{
            descriptionLbl.text = ""
            btnView.isHidden = true
        }
        
        
        
        //For Industry
        if(clientDetails?.industry != nil && clientDetails?.industry != "0"){
            lblInsdustry.text =  (APP_Delegate.industries[Int((clientDetails?.industry)!)!-1])["name"]
        }
        
        
    }
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if segue.identifier == "EditClient"{
                let clintDetail = segue.destination as! EditClientVC
                clintDetail.clientDetail = clientDetails
        }
    }
    
    @objc func swiped(_ gesture: UISwipeGestureRecognizer) {
        if gesture.direction == .left {
            if (self.tabBarController?.selectedIndex)! < 3 { // set your total tabs here
                self.tabBarController?.selectedIndex += 1
            }
        } else if gesture.direction == .right {
            if (self.tabBarController?.selectedIndex)! > 0 {
                self.tabBarController?.selectedIndex -= 1
            }
        }
    }
    
    @IBAction func detailInstructionViewBtn(_ sender: Any) {
        if clientDetails?.note == nil || clientDetails?.note == "" {
            ShowError(message: AlertMessage.Note_not_available, controller: self)
            return
        }
        
        showBackgroundView()
        textDescriptionView.text = clientDetails?.note
        textDescriptionView.textContainerInset = UIEdgeInsets.init(top: 8,left: 5,bottom: 8,right: 8); // top, left, bottom, right
        view.addSubview(descriptionView)
        descriptionView.center = CGPoint(x: backgroundView.frame.width / 2, y: backgroundView.frame.height / 2)
    }
    
    
    
    @IBAction func closeDetailBtn(_ sender: Any) {
        hideBackgroundView()
    }
    
    @IBAction func tapOnBackgrounVw(_ sender: Any) {
        hideBackgroundView()
    }
    
    
    func showBackgroundView() {
        backgroundView.isHidden = false
        UIView.animate(withDuration: 0.2, animations: {
            self.backgroundView.backgroundColor = UIColor.black
            self.backgroundView.alpha = 0.5
        })
    }
    
    func hideBackgroundView() {
        if (descriptionView != nil) {
            descriptionView.removeFromSuperview()
        }
       
        self.backgroundView.isHidden = true
        self.backgroundView.backgroundColor = UIColor.clear
        self.backgroundView.alpha = 1
    }
    
    

}
