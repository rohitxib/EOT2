//
//  ViewController.swift
//  EyeOnTask
//
//  Created by Apple on 03/05/18.
//  Copyright Â© 2018 Hemant. All rights reserved.
//

import UIKit
import IQKeyboardManagerSwift

class AddJobVC: UIViewController, UITextFieldDelegate , OptionViewDelegate {
    
    @IBOutlet weak var H_lattitude: NSLayoutConstraint!

    @IBOutlet weak var latitued: UITextField!
    @IBOutlet weak var longitued: UITextField!
    
    @IBOutlet weak var btnDonebgView: UIButton!
    @IBOutlet weak var btnCancelbgView: UIButton!
    @IBOutlet weak var btnSubmit: UIButton!
    @IBOutlet weak var btnAdd: UIButton!
    @IBOutlet weak var lblAddTags: UILabel!
    @IBOutlet weak var lblSchedulStart: UILabel!
    @IBOutlet weak var lblScheduleEnd: UILabel!
    
    
    @IBOutlet weak var btnClear: UIButton!
    @IBOutlet var container_view: UIView!
    
    @IBOutlet var txtfldJobTitle: UITextField!
    @IBOutlet var txtfld_JobDesc: UITextField!
    @IBOutlet var txtfld_JobPriority: UITextField!
    @IBOutlet var txtfld_JobInstruction: UITextField!
    @IBOutlet var txtfld_Client: UITextField!
    @IBOutlet var txtfld_Contact: UITextField!
    @IBOutlet var txtfld_MobNo: UITextField!
    @IBOutlet var txtfld_AltMobNo: UITextField!
    @IBOutlet var txtfld_Email: UITextField!
    @IBOutlet var txtfld_SiteName: UITextField!
    @IBOutlet var txtfld_Address: UITextField!
    @IBOutlet var txtfld_City: UITextField!
    @IBOutlet var txtfld_PostalCode: UITextField!
    @IBOutlet var txtfld_State: UITextField!
    @IBOutlet var txtfld_Country: UITextField!

    @IBOutlet var taxFieldAddTags: FloatLabelTextField!
    @IBOutlet var txtfld_FieldWorker: UITextField!
    
    @IBOutlet var tagView: ASJTagsView!
    @IBOutlet var dateAndTimePicker: UIDatePicker!
    @IBOutlet var lbl_EndSchTime: UILabel!
    @IBOutlet var lbl_EndSchDate: UILabel!
    @IBOutlet var lbl_SrtSchTime: UILabel!
    @IBOutlet var lbl_SrtSchDate: UILabel!
    @IBOutlet weak var txt_landmark: FloatLabelTextField!
    @IBOutlet var bgViewOfPicker: UIView!
    @IBOutlet var scroll_View: UIScrollView!
    var FltWorkerId = [String]()

    @IBOutlet var tagVw_OFTag: ASJTagsView!
    
    @IBOutlet weak var H_landmark: NSLayoutConstraint!
    @IBOutlet var lbl_AssignTo: UILabel!
    @IBOutlet var btnClient: UIButton!
    @IBOutlet var btnSitName: UIButton!
    @IBOutlet var btnContact: UIButton!
    var optionalVw : OptionalView?
    var isOpenOptionalView = false
    let arrOfPriroty = ["Low" , "Medium" , "High"]
    var arrClintList = [ClientList]()
    var FltArrClintList = [ClientList]()
    var arrOffldWrkData = [FieldWorkerDetails]()
    var FltArrOffldWrkData = [FieldWorkerDetails]()
    var arrOfShowData = [Any]()
    var arrOfaddTags = [[String : String]]()

    var sltDropDownBtnTag : Int!
    var sltTxtField = UITextField()

  //  let datePicker = UIDatePicker()
    var isStartScheduleBtn : Bool!
    let cellReuseIdentifier = "cell"
    let param = Params()
    var isClintFutUser  = false
    var isSitFutUser  = false
    var isContactFutUser  = false
     var isClear  = false
    var callbackForJobVC: ((Bool) -> Void)?

    
    override func touchesMoved(_ touches: Set<UITouch>, with event: UIEvent?) {
        guard touches.first != nil else { return }
        
        DispatchQueue.main.async {
            self.removeOptionalView()
        }
    }
    

    override func viewDidLoad() {
        super.viewDidLoad()
        
//        tableView.rowHeight = UITableView.automaticDimension
//        tableView.estimatedRowHeight = 165
       
        self.setUpMethod()
        
        LocationManager.shared.startTracking()
        
        IQKeyboardManager.shared.enable = false
        self.registorKeyboardNotification()
        self.getClintListFrmDB()
        
        getJobTittle()
        getFieldWorkerList()
        getTagListService()
        
        getClientSink()
        getClientSiteSink()
        getClientContactSink()
        
        if let langCode = getCurrentSelectedLanguageCode() {
            dateAndTimePicker.locale = Locale(identifier: langCode)
        }
        
        DispatchQueue.main.async {
            self.createTags(strName: (getUserDetails()?.fnm)!, view: self.tagView)
        }
        
        
        self.FltWorkerId.append((getUserDetails()?.usrId)!)
        
        setLocalization()
        
        ActivityLog(module:Modules.job.rawValue , message: ActivityMessages.jobsAdd)
     }
    
    func setLocalization() -> Void {
        self.navigationItem.title = LanguageKey.title_add_job
        
        taxFieldAddTags.placeholder = LanguageKey.add_tag
        txtfld_FieldWorker.placeholder = LanguageKey.add_fieldworker
        txtfld_Contact.placeholder = LanguageKey.contact_name
        txtfld_Email.placeholder = LanguageKey.email
        txtfld_MobNo.placeholder = LanguageKey.mob_no
        txtfld_AltMobNo.placeholder = LanguageKey.alt_mobile_number
        txtfldJobTitle.placeholder = "\(LanguageKey.Job_title) *"
        txtfld_JobDesc.placeholder = LanguageKey.job_desc
        //txtfld_JobPriority.text = LanguageKey.medium
        txtfld_JobInstruction.placeholder = LanguageKey.job_inst
        txtfld_Client.placeholder = "\(LanguageKey.client_name) *"
        txtfld_SiteName.placeholder = LanguageKey.site_name
        txtfld_Address.placeholder = "\(LanguageKey.address) *"
        txtfld_City.placeholder = LanguageKey.city
        txtfld_PostalCode.placeholder = LanguageKey.postal_code
        txtfld_Country.placeholder = "\(LanguageKey.country) *"
        txtfld_State.placeholder = "\(LanguageKey.state) *"
        latitued.placeholder = LanguageKey.latitude
        longitued.placeholder = LanguageKey.longitued
        lbl_AssignTo.text = "\(LanguageKey.assign_to)"
        lblSchedulStart.text = LanguageKey.shdl_start
        lblScheduleEnd.text = LanguageKey.shdl_end
        lblAddTags.text = LanguageKey.tags
        btnDonebgView.setTitle(LanguageKey.done , for: .normal)
        btnCancelbgView.setTitle(LanguageKey.cancel , for: .normal)
        btnSubmit.setTitle(LanguageKey.create_job , for: .normal)
        btnAdd.setTitle(LanguageKey.add , for: .normal)
        btnClear.setTitle(LanguageKey.clear , for: .normal)
        btnClient.setTitle(LanguageKey.save_for_future_use , for: .normal)
        btnContact.setTitle(LanguageKey.save_for_future_use , for: .normal)
        btnSitName.setTitle(LanguageKey.save_for_future_use , for: .normal)
        txtfld_JobPriority.placeholder = LanguageKey.job_priority
        txt_landmark.placeholder = LanguageKey.landmark_addjob
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super .viewWillAppear(animated)
        
        

        
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        IQKeyboardManager.shared.enable = true
        self.removeKeyboardNotification()
    }
    
    
    @IBAction func clearButtonTapped(_ sender: Any) {
        isClear = true
        DispatchQueue.main.async {
            self.lbl_SrtSchTime.text =  "00:00"
            self.lbl_SrtSchDate.text =  "yyyy-MM-dd"
            self.lbl_EndSchTime.text =  "00:00"
            self.lbl_EndSchDate.text =  "yyyy-MM-dd"
        }
    }
    
    
    
    func setUpMethod(){
        
        
        if getDefaultSettings()?.isJobLatLngEnable == "0" {
            H_lattitude.constant = 0.0
        }
        
        if getDefaultSettings()?.isLandmarkEnable == "0" {
            H_landmark.constant = 0.0
        }
        
        
        let duration : String? = getDefaultSettings()?.duration != "" ? getDefaultSettings()?.duration  : "0:0"
        let arrOFDurationTime = duration?.components(separatedBy: ":")
        
        let currentTime : String? = getDefaultSettings()?.jobCurrentTime
        if(currentTime != "" && currentTime != nil){
                    let arrOFCurntTime = currentTime?.components(separatedBy: ":")
                    let strDate = getSchuStartAndEndDateForAgoTime(Hrs:Int(arrOFCurntTime![0])!, min: Int(arrOFCurntTime![1])!, diffOfHr: Int(arrOFDurationTime![0])!, diffOfMin: Int(arrOFDurationTime![1])!)
            
                    let arr = strDate.0.components(separatedBy: " ")
            
                    if arr.count == 2 {
                        lbl_SrtSchDate.text = arr[0]
                        lbl_SrtSchTime.text = arr[1]
                        lbl_EndSchDate.text = arr[0]
                    }else{
                        lbl_SrtSchDate.text = arr[0]
                        lbl_SrtSchTime.text = arr[1] + " " + arr[2]
                        lbl_EndSchDate.text = arr[0]
                    }
            
                    let arrOfEndDate = strDate.1.components(separatedBy: " ")
                    if arrOfEndDate.count == 2 {
                        lbl_EndSchDate.text = arrOfEndDate[0]
                        lbl_EndSchTime.text = arrOfEndDate[1]
                    }else{
                        lbl_EndSchDate.text = arrOfEndDate[0]
                        lbl_EndSchTime.text = arrOfEndDate[1] + " " + arrOfEndDate[2]
                    }
            
            
            
            
        }else{
            let adminSchTime : String? = getDefaultSettings()?.jobSchedule
            if(adminSchTime != "" && adminSchTime != nil){
                    let duration : String? = getDefaultSettings()?.duration != "" ?  getDefaultSettings()?.duration :"0:0"
                    let arrOFDurationTime = duration?.components(separatedBy: ":")
                
                    let strDate = getSchStartandEndDateAndTimeForSchDate(timeInterval: (getDefaultSettings()?.jobSchedule)!, diffOfHr: Int(arrOFDurationTime![0])!, diffOfMin: Int(arrOFDurationTime![1])!)
                
                
                    let arr = strDate.0.components(separatedBy: " ")
                    if arr.count == 2 {
                        lbl_SrtSchDate.text = arr[0]
                        lbl_SrtSchTime.text = arr[1]
                        lbl_EndSchDate.text = arr[0]
                    }else{
                        lbl_SrtSchDate.text = arr[0]
                        lbl_SrtSchTime.text = arr[1] + " " + arr[2]
                        lbl_EndSchDate.text = arr[0]
                    }
                
                
                
                    let arrOfEndDate = strDate.1.components(separatedBy: " ")
                    if arrOfEndDate.count == 2 {
                        lbl_EndSchDate.text = arrOfEndDate[0]
                        lbl_EndSchTime.text = arrOfEndDate[1]
                    }else{
                        lbl_EndSchDate.text = arrOfEndDate[0]
                        lbl_EndSchTime.text = arrOfEndDate[1] + " " + arrOfEndDate[2]
                    }
                
                
            }
        }  
    }
    

    //=====================================
    //MARK:- Registor Keyboard Notification
    //=====================================
    func registorKeyboardNotification(){
        NotificationCenter.default.addObserver(self, selector: #selector(self.keyboardWillShow), name: UIResponder.keyboardDidShowNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(self.keyboardWillHide), name: UIResponder.keyboardDidHideNotification, object: nil)
    }
    
    
    //=====================================
    //MARK:- Remove Keyboard Notification
    //=====================================
    func removeKeyboardNotification(){

        NotificationCenter.default.removeObserver(self,name: UIResponder.keyboardDidShowNotification,object: nil)
         NotificationCenter.default.removeObserver(self,name: UIResponder.keyboardDidHideNotification,object: nil)
    }
    
    func setInitialFramOfPickerView(){
         DispatchQueue.main.async {
        let frame = CGRect(x: self.view.frame.origin.x, y: self.view.frame.size.height, width: self.view.frame.size.width, height: 240.0)
            self.bgViewOfPicker.frame = frame
        }
    }

    func showDateAndTimePicker(){
       // self.dateAndTimePicker.minimumDate = Date()
        self.bgViewOfPicker.isHidden = false
        UIView.animate(withDuration: 0.2)  {
            let frame = CGRect(x: 0, y: self.view.frame.size.height - 240, width: self.view.frame.size.width, height: 240)
            self.bgViewOfPicker.frame = frame

        }
    }
    
    @IBAction func addBtnAction(_ sender: Any) {
        ShowAlert(title: LanguageKey.dialog_alert, message: AlertMessage.validFieldWorker, controller: windowController, cancelButton: LanguageKey.ok as NSString, okButton: nil, style: UIAlertController.Style.alert, callback: {_,_ in})
        
        self.txtfld_FieldWorker.text = ""
    }
    
    @IBAction func addBtnOfTads(_ sender: Any) {
        self.scroll_View.isScrollEnabled = true
        let trimValue = self.taxFieldAddTags.text?.trimmingCharacters(in: .whitespacesAndNewlines)
        
        if trimValue == "" {
           // ShowError(message: AlertMessage.addTag, controller: windowController)
            return
        }
        
        
        let isExist =  arrOfaddTags.contains{ ( dict : [String : String]) -> Bool in
           
            if dict["tnm"] == trimValue?.capitalizingFirstLetter(){
                return true
            }
            return false
        }
        if(!isExist){
            self.tagVw_OFTag.addTag(trimValue!.capitalizingFirstLetter(), withHeight: 0, withtagFont: UIFont.systemFont(ofSize: 10.0), withDeleteBtn: true)
            /*let dict = ["tagId" : String(arrOfaddTags.count + 1),
                        "tnm" : trimValue]*/
         let savedTagList = DatabaseClass.shared.fetchDataFromDatabse(entityName: "TagsList", query: nil) as! [TagsList]
            var dict : [String : String]?
            if let idx = savedTagList.firstIndex(where: { $0.tnm ==  trimValue }){
                dict = ["tagId" : savedTagList[idx].tagId!,
                        "tnm" : trimValue!.capitalizingFirstLetter()]
            }else{
                 dict = ["tagId" : "",
                         "tnm" : trimValue!.capitalizingFirstLetter()]
            }
            
            
           
            arrOfaddTags.append(dict! )
            self.tagVw_OFTag.deleteBlock = {(tagText : String ,idx : Int) -> Void in
                self.tagVw_OFTag.deleteTag(at: idx)
                self.arrOfaddTags.remove(at: idx)
            }
        }
  
        self.taxFieldAddTags.text = ""
    }
    

    @IBAction func btnScheduleStrtAction(_ sender: Any) {
        removeOptionalView()
        isStartScheduleBtn = true
        self.bgViewOfPicker.isHidden = false
        self.showDateAndTimePicker()
    }
    
    @IBAction func btnScheduleEndAction(_ sender: Any) {
        removeOptionalView()
        isStartScheduleBtn = false
        self.bgViewOfPicker.isHidden = false
        self.showDateAndTimePicker()
    }
    
    
    func convetStrDateIntoDate(strDate : String) -> Date{
        
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd h:mm a"
        dateFormatter.timeZone = NSTimeZone.local
        dateFormatter.locale = Locale(identifier: "en_US")
        let date = dateFormatter.date(from: strDate)
        return date!
        
    }
    
    @IBAction func btnSaveAction(_ sender: Any) {
        
        isClear = false
        
        self.bgViewOfPicker.isHidden = true
        let date = self.dateAndTimePicker.date
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy-MM-dd h:mm a"
        formatter.timeZone = TimeZone.current
        
        if let langCode = getCurrentSelectedLanguageCode() {
            formatter.locale = Locale(identifier: langCode)
        }
        
        let strDate = formatter.string(from: date)
        if(isStartScheduleBtn){
            let arr = strDate.components(separatedBy: " ")
            
            if arr.count == 2 {
                lbl_SrtSchDate.text = arr[0]
                lbl_SrtSchTime.text = arr[1]
            }else{
                lbl_SrtSchDate.text = arr[0]
                lbl_SrtSchTime.text = arr[1] + " " + arr[2]
            }
            
           
            
        }else{
            let schStartDate = self.lbl_SrtSchDate.text! + " " +  self.lbl_SrtSchTime.text!
            let value = compareTwodate(schStartDate: schStartDate, schEndDate: strDate, dateFormate: DateFormate.yyyy_MM_dd_h_mm_a)
            if(value == "orderedDescending"){
                ShowAlert(title: LanguageKey.dialog_alert, message: AlertMessage.dateMustBeGreater, controller: windowController, cancelButton:  LanguageKey.ok as NSString, okButton: nil, style: .alert,callback: {_,_ in})
            }else{
                let arr = strDate.components(separatedBy: " ")
                
                if arr.count == 2 {
                    lbl_EndSchDate.text = arr[0]
                    lbl_EndSchTime.text = arr[1]
                }else{
                    lbl_EndSchDate.text = arr[0]
                    lbl_EndSchTime.text = arr[1] + " " + arr[2]
                }
            }
            
        }
    }
    
    @IBAction func btnCancelAction(_ sender: Any) {
        self.bgViewOfPicker.isHidden = true
    }
   
    
    //==========================
//MARK:- Get Country Json
//==========================
    
    func getCountry() -> NSArray {
        return getJson(fileName: "countries")["countries"] as! NSArray
    }
    
    func getStates() -> NSArray {
        return getJson(fileName: "states")["states"] as! NSArray
    }
    
    @IBAction func refresh(_ sender: Any) {
    }
    @IBAction func jobPriority_Btn(_ sender: Any) {
    }
    @IBAction func txtfldClientBtn(_ sender: Any) {
    }
    
    @IBAction func txtfldcontact_Btn(_ sender: Any) {
    }
    @IBAction func txtfld_siteBtn(_ sender: Any) {
    }
    @IBAction func txtfld_stateBtn(_ sender: Any) {
    }
    @IBAction func txtfld_countryBtn(_ sender: Any) {
    }
    @IBAction func scheduleStartBtn(_ sender: Any) {
        //showDatePicker()
    }
    @IBAction func schedulestartTimeBtn(_ sender: Any) {
    }
    @IBAction func schedeuleEndBtn(_ sender: Any) {
        
    }
    @IBAction func scheduleEndTimeBtn(_ sender: Any) {
    }
    
    @IBAction func btnSubmitClickAction(_ sender: Any) {
        
        let trimmClintNm  = trimString(string: self.txtfld_Client.text!)
        let trimmAdr = trimString(string: self.txtfld_Address.text!)
        let trimmMobNo = trimString(string: self.txtfld_MobNo.text!)
        let trimmAltMobNo = trimString(string: self.txtfld_AltMobNo.text!)
        let trimmEmail = trimString(string: self.txtfld_Email.text!)
        
        let jobPrty = getPriortyRawValueAccordingToText(txt: (txtfld_JobPriority.text?.trimmingCharacters(in: .whitespacesAndNewlines))!)
        
        if trimmEmail.count > 0 {
            if !isValidEmail(testStr: trimmEmail)  {
                ShowError(message: AlertMessage.validEmailId, controller: windowController)
                return
            }
        }
        
        
        if (trimmMobNo.count > 0) && (trimmMobNo.count < 8) {
            ShowError(message: AlertMessage.validMobile, controller: windowController)
                return
            }
        
        
        if trimmAltMobNo.count > 0 && trimmAltMobNo.count < 8  {
            ShowError(message: AlertMessage.validAlMobileNo, controller: windowController)
                return
            }
        
        
        
        
        if(param.jtId != nil && param.jtId!.count > 0){
            if(jobPrty != 0){
                    if (trimmClintNm != ""){
                        if(trimmAdr != ""){
                            if(param.ctry != nil) && (param.ctry != ""){
                                if(param.state != nil) && (param.state != ""){
                                    self.addJob()
                                } else {
                                    ShowError(message: AlertMessage.validState, controller: windowController)
                                }
                            } else {
                                ShowError(message: AlertMessage.selectCountry, controller: windowController)
                            }
                        } else {
                            ShowError(message: AlertMessage.validAddress, controller: windowController)
                        }
                    } else {
                        ShowError(message: AlertMessage.clientName, controller: windowController)
                    }
            }else{
                ShowError(message: AlertMessage.jobPriority, controller: windowController)
            }
        }else{
            ShowError(message: AlertMessage.jobTitle, controller: windowController)
        }
    }
    
    @IBAction func btnActionMethod(_ sender: UIButton) {
        self.sltDropDownBtnTag  = sender.tag
        self.callMethodforOpenDwop(tag: sender.tag)
        
    }
    
    @IBAction func showTags(_ sender: UIButton) {
        self.sltDropDownBtnTag  = sender.tag
        self.callMethodforOpenDwop(tag: sender.tag)
    }
    
    
    
    func callMethodforOpenDwop(tag : Int){
        if(self.optionalVw != nil){
            self.removeOptionalView()
              return
        }
    
        switch tag {
        case 0:
            if(self.optionalVw == nil){
                arrOfShowData = DatabaseClass.shared.fetchDataFromDatabse(entityName: "UserJobTittleNm", query: nil) as! [UserJobTittleNm]
                if(arrOfShowData.count > 0){
                    self.openDwopDown( txtField: self.txtfldJobTitle, arr: arrOfShowData)
                }else{
                    ShowError(message: AlertMessage.noJobTitleAvailable , controller: windowController)
                }
            }else{
                self.removeOptionalView()
            }
            

            break
        case 1:
            self.openDwopDown( txtField: self.txtfld_JobPriority, arr: arrOfPriroty)
            break
        case 2:
           // self.openDwopDown( txtField: self.txtfld_Client, arr: arrClintList)

           // if(btnClient.imageView?.image == UIImage(named: "arrowdown")){
            if(self.param.cltId != nil && self.param.cltId != ""){
                self.openDwopDown( txtField: self.txtfld_Client, arr: arrClintList)

            }else{
                param.cltId = nil
                param.nm = self.txtfld_Client.text?.trimmingCharacters(in: .whitespacesAndNewlines)
                if(btnClient.imageView?.image == UIImage(named: "BoxOFUncheck")){
                    self.btnClient.setImage(UIImage(named: "BoxOFCheck"), for: .normal)
                  
                    self.isClintFutUser = true
                }else{
                    self.btnClient.setImage(UIImage(named: "BoxOFUncheck"), for: .normal)
                    self.isClintFutUser = false

                }
            }
            break
        case 3:
            if(self.txtfld_Client.text?.isEmpty)!{
                self.removeOptionalView()
                break
            }
            
          //  if(btnContact.imageView?.image == UIImage(named: "arrowdown")){
            
            if(self.param.conId != nil && self.param.conId != ""){
                
              //  FltArrClintList = self.filterArrUsingpredicate(txtFid: txtfld_Client, txt: txtfld_Client.text! , range : nil , arr : arrClintList, predecateIdentity: "nm") as! [ClientList]
             //   self.openDwopDown( txtField: self.txtfld_Contact, arr: FltArrClintList)

                if(param.cltId != nil){
                    let query = "cltId = '\(param.cltId!)'"
                    arrOfShowData = DatabaseClass.shared.fetchDataFromDatabse(entityName: "ClientContactList", query: query) as! [ClientContactList]
                    if(arrOfShowData.count > 0){
                        self.openDwopDown( txtField: self.txtfld_Contact, arr: arrOfShowData)
                        
                    }
                }

            }else{
                param.conId = nil
                param.cnm = self.txtfld_Contact.text?.trimmingCharacters(in: .whitespacesAndNewlines)
                if(btnContact.imageView?.image == UIImage(named: "BoxOFUncheck")){
                    self.btnContact.setImage(UIImage(named: "BoxOFCheck"), for: .normal)
                 
                    self.isContactFutUser = true
                }else{
                    self.btnContact.setImage(UIImage(named: "BoxOFUncheck"), for: .normal)
                    self.isContactFutUser = false
                    
                }
            }
           
            break
        case 4:
            if(self.txtfld_Client.text?.isEmpty)!{
                self.removeOptionalView()
                break
            }
          //  if(btnSitName.imageView?.image == UIImage(named: "arrowdown")){
            if(self.param.siteId != nil && self.param.siteId != ""){
//                FltArrClintList = self.filterArrUsingpredicate(txtFid: txtfld_Client, txt: txtfld_Client.text! , range : nil , arr : arrClintList, predecateIdentity: "nm") as! [ClientList]
//                self.openDwopDown( txtField: self.txtfld_SiteName, arr:FltArrClintList)
                
                if(param.cltId != nil){
                    let query = "cltId = '\(param.cltId!)'"
                    arrOfShowData = DatabaseClass.shared.fetchDataFromDatabse(entityName: "ClientSitList", query: query) as! [ClientSitList]
                    if(arrOfShowData.count > 0){
                        self.openDwopDown( txtField: self.txtfld_SiteName, arr: arrOfShowData)
                        
                    }
                }
            }else{
                param.siteId = ""
                param.snm = self.txtfld_SiteName.text?.trimmingCharacters(in: .whitespacesAndNewlines)
                if(btnSitName.imageView?.image == UIImage(named: "BoxOFUncheck")){
                    self.btnSitName.setImage(UIImage(named: "BoxOFCheck"), for: .normal)
                 
                    self.isSitFutUser = true
                }else{
                    self.btnSitName.setImage(UIImage(named: "BoxOFUncheck"), for: .normal)
                    self.isSitFutUser = false
                }
            }
       
            break
        case 5:
            
            if(self.optionalVw == nil){
                let namepredicate: NSPredicate = NSPredicate(format:"self.name == %@", self.txtfld_Country.text! )
                let arr = getCountry().filtered(using: namepredicate)
                if(arr.count > 0){
                    let dict = (arr[0] as? [String : String])
                    let serchCourID = dict!["id"]
                    let bPredicate: NSPredicate = NSPredicate(format:"self.country_id == %@", serchCourID! )
                    arrOfShowData =  getStates().filtered(using: bPredicate)
                    self.openDwopDown( txtField: self.txtfld_State, arr: arrOfShowData)
                }
                
                
            }else{
                self.removeOptionalView()
                
            }
            
            break
        case 6://Country
            
            if(self.optionalVw == nil){
                //  self.reradJson()
                arrOfShowData = getJson(fileName: "countries")["countries"] as! [Any]
                self.openDwopDown( txtField: self.txtfld_Country, arr: arrOfShowData)
                
            }else{
                self.removeOptionalView()
            }
            
            break
        case 7 :
            if(self.optionalVw == nil){
              self.arrOfShowData = DatabaseClass.shared.fetchDataFromDatabse(entityName: "FieldWorkerDetails", query: nil) as! [FieldWorkerDetails]
                if(arrOfShowData.count > 0){
                    self.openDwopDown(txtField: self.txtfld_FieldWorker, arr: self.arrOfShowData)
                }
//                else{
//                    ShowError(message: AlertMessage.noFieldWorkerAvailable , controller: windowController)
//                }
            }else{
                self.removeOptionalView()

            }
            
        case 8 :
            
            if(self.optionalVw == nil){
                self.arrOfShowData = DatabaseClass.shared.fetchDataFromDatabse(entityName: "TagsList", query: nil) as! [TagsList]
                if(arrOfShowData.count > 0){
                    self.openDwopDown(txtField: self.taxFieldAddTags, arr: self.arrOfShowData)
                }else{
                    ShowError(message: AlertMessage.noTagAvailable , controller: windowController)
                }
            }else{
                self.removeOptionalView()
                
            }
//            if(self.optionalVw == nil){
//
//                self.arrOfShowData =  APP_Delegate.arrOftags
//               // if(self.arrOfShowData.count > 0){
//                    self.openDwopDown(txtField: self.taxFieldAddTags, arr: self.arrOfShowData)
//               // }else{
//                  //  ShowError(message: "No Tag Available" , controller: windowController)
//                //}
//            }else{
//                self.removeOptionalView()
//
//            }
        default:
            return
        }
    }
    
    func openDwopDown(txtField : UITextField , arr : [Any]) {
        if (optionalVw == nil){
            self.optionalVw = OptionalView.instanceFromNib() as? OptionalView;
            let sltTxtfldFrm = txtField.convert(txtField.bounds, from: self.view)
            self.optionalVw?.setUpMethod(frame: CGRect(x: 10, y: ((-sltTxtfldFrm.origin.y) + sltTxtfldFrm.size.height), width: self.view.frame.size.width - 20, height: CGFloat((arr.count > 5) ? 150 : arr.count*38)))
            self.optionalVw?.delegate = self
            self.view.addSubview( self.optionalVw!)
             self.scroll_View.isScrollEnabled = false
           
            self.optionalVw?.removeOptionVwCallback = {(isRemove : Bool) -> Void in
                    self.removeOptionalView()
               }
                
            
            // self.optionalVw = nil
        }else{
            DispatchQueue.main.async {
                self.removeOptionalView()
            }
        }
        
   }
    
    
    func openDwopDownForConstantHeight(txtField : UITextField , arr : [Any]) {
        if (optionalVw == nil){
            self.optionalVw = OptionalView.instanceFromNib() as? OptionalView;
            let sltTxtfldFrm = txtField.convert(txtField.bounds, from: self.view)
            self.optionalVw?.setUpMethod(frame: CGRect(x: 10, y: ((-sltTxtfldFrm.origin.y) + sltTxtfldFrm.size.height), width: self.view.frame.size.width - 20, height: 100))
            self.optionalVw?.delegate = self
            self.view.addSubview( self.optionalVw!)
            self.scroll_View.isScrollEnabled = false
            
            self.optionalVw?.removeOptionVwCallback = {(isRemove : Bool) -> Void in
                self.removeOptionalView()
            }
            
            
            // self.optionalVw = nil
        }else{
            DispatchQueue.main.async {
                self.removeOptionalView()
            }
        }
        
    }
   
    
    
    func removeOptionalView(){
        if optionalVw != nil {
            self.optionalVw?.removeFromSuperview()
            self.optionalVw = nil
            self.scroll_View.isScrollEnabled = true
            self.FltArrClintList.removeAll()
        }
   }
    
    func getArrForOptionalView( ) -> [Any]{
        switch self.sltDropDownBtnTag {
        case 0:
             return arrOfShowData
        case 1:
             return arrOfPriroty
        case 2:
            return FltArrClintList.count != 0 ? FltArrClintList : arrClintList
        case 3:
            return arrOfShowData
        case 4:
            return arrOfShowData
        case 5:
            return arrOfShowData
        case 6:
            return arrOfShowData
        case 7:
            return  arrOfShowData
        case 8:
            return  arrOfShowData
        default:
            return [""]
        }
     }
//====================================================
//MARK:- OptionView Delegate Methods
//====================================================
    func optionView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return getArrForOptionalView().count
    }
    
    func optionView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {

        var cell = tableView.dequeueReusableCell(withIdentifier: cellReuseIdentifier)
   
        
        if(cell == nil){
            cell = UITableViewCell.init(style: .default, reuseIdentifier: cellReuseIdentifier)
        }
        
        cell!.textLabel!.font = UIFont.systemFont(ofSize: 13.0)
        cell?.backgroundColor = .clear
        //cell?.textLabel?.textColor = UIColor.init(red: 0.0/255.0, green: 132.0/255.0, blue: 141.0/255.0, alpha: 1)
        cell?.textLabel?.textColor = UIColor.darkGray
        
        switch self.sltDropDownBtnTag {
        case 0:
            let jobTittleListData  =  arrOfShowData[indexPath.row] as? UserJobTittleNm
            
//            let isExist = param.jtId?.contains{$0.jtId == jobTittleListData?.jtId}
//
//            if isExist! {
//                cell?.accessoryType = UITableViewCell.AccessoryType.checkmark
//            }else {
//                cell?.accessoryType = UITableViewCell.AccessoryType.none
//            }
            
            
            _ =  param.jtId?.contains{ ( arry : jtIdParam) -> Bool in
                if arry.jtId == jobTittleListData?.jtId{
                    cell?.accessoryType = UITableViewCell.AccessoryType.checkmark
                    return true
                }else{
                    cell?.accessoryType = UITableViewCell.AccessoryType.none
                    return false
                }
            }
            
            cell?.textLabel?.text = jobTittleListData?.title?.capitalizingFirstLetter()
            break
        case 1:
             cell?.textLabel?.text = arrOfPriroty[indexPath.row].capitalizingFirstLetter()
             break
            
        case 2:
           let clintList = self.FltArrClintList.count != 0 ? self.FltArrClintList[indexPath.row] : arrClintList[indexPath.row]
           
           cell?.textLabel?.text = clintList.nm?.capitalizingFirstLetter()
            break
            
        case 3:
            let cltAllContactList  =  arrOfShowData[indexPath.row] as? ClientContactList
            cell?.textLabel?.text = cltAllContactList?.cnm?.capitalizingFirstLetter()
            break
            
        case 4:
            let cltAllSiteList  =  arrOfShowData[indexPath.row] as? ClientSitList
            cell?.textLabel?.text = cltAllSiteList?.snm?.capitalizingFirstLetter()
            break
            
        case 5:
            if(arrOfShowData.count > 0){
                 cell?.textLabel?.text =  ((arrOfShowData[indexPath.row] as? [String : Any])?["name"] as? String)?.capitalizingFirstLetter()
            }
            break
            
        case 6:
            if(arrOfShowData.count > 0){
                    cell?.textLabel?.text =  ((arrOfShowData[indexPath.row] as? [String : Any])?["name"] as? String)?.capitalizingFirstLetter()
            }
       
            break
            
        case 7:
            cell?.textLabel?.text = (self.arrOfShowData[indexPath.row] as? FieldWorkerDetails)?.fnm?.capitalizingFirstLetter()
            break
        case 8:
            cell?.textLabel?.text = (self.arrOfShowData[indexPath.row] as? TagsList)?.tnm?.capitalizingFirstLetter()
            break
        default: break
            
        }
        return cell!
        
    }
    
    func optionView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
  
        switch self.sltDropDownBtnTag {
        case 0:
            let objOfArr = self.arrOfShowData[indexPath.row] as? UserJobTittleNm
            
            if param.jtId == nil {
                param.jtId = [jtIdParam]()
            }
            
            let jt = jtIdParam()
            jt.jtId = objOfArr?.jtId
            jt.title = objOfArr?.title
            
            let isExist =  param.jtId?.contains{ ( arry : jtIdParam) -> Bool in
                if arry.jtId == jt.jtId{
                    return true
                }
                return false
            }
            
            if !isExist!{
                 param.jtId?.append(jt)
            }else{
                let objIndex : Int? = param.jtId?.firstIndex(where: { (jtData : jtIdParam) -> Bool in
                    if jt.jtId == jtData.jtId{
                        return true
                    }else{
                        return false
                    }
                })
                if (objIndex != nil){
                    param.jtId?.remove(at: objIndex!)
                }
            }
            
            if (param.jtId != nil && param.jtId!.count > 0) {
                
                var strTitle = ""
                for jtid in param.jtId! {
                    if strTitle == ""{
                        strTitle = jtid.title ?? ""
                    }else{
                        strTitle = "\(strTitle), \(jtid.title ?? "")"

                    }
                    DispatchQueue.main.async {
                        self.txtfldJobTitle.text = strTitle
                    }

                }
            }else{
                self.txtfldJobTitle.text = ""
            }

            break
        case 1:
            self.txtfld_JobPriority.text = self.arrOfPriroty[indexPath.row]
            break
        case 2:
               let objOfArr = self.FltArrClintList.count != 0 ? self.FltArrClintList[indexPath.row] : arrClintList[indexPath.row]
               self.txtfld_Client.text = objOfArr.nm
               param.nm = objOfArr.nm
               param.cltId = objOfArr.cltId
               //self.btnClient.setImage(UIImage(named: "arrowdown"), for: .normal)
               //self.btnClient.isHidden = false
               self.btnClient.isHidden = true
               self.txtfld_SiteName.isUserInteractionEnabled = true

               let query = "cltId = '\(objOfArr.cltId!)' AND def = '1'"

               //For Contact
               let arrOfContNm = DatabaseClass.shared.fetchDataFromDatabse(entityName: "ClientContactList", query: query) as! [ClientContactList]
               if(arrOfContNm.count > 0){
                let contact = arrOfContNm[0]
                self.txtfld_Contact.text = contact.cnm
                param.conId = contact.conId
                //self.btnContact.setImage(UIImage(named: "arrowdown"), for: .normal)
               // self.btnContact.isHidden = false
                self.btnContact.isHidden = true
            
                txtfld_MobNo.text = contact.mob1
                txtfld_AltMobNo.text = contact.mob2
                txtfld_Email.text = contact.email
               }else{
                self.txtfld_Contact.text = ""
                param.conId = nil
               // self.btnContact.setImage(UIImage(named: "BoxOFUncheck"), for: .normal)
                self.btnContact.isHidden = true
                txtfld_MobNo.text = ""
                txtfld_AltMobNo.text = ""
                txtfld_Email.text = ""
               }
               
               //For Site
               let arrOfSiteNm = DatabaseClass.shared.fetchDataFromDatabse(entityName: "ClientSitList", query: query) as! [ClientSitList]
                 if(arrOfSiteNm.count > 0){
                     let site = arrOfSiteNm[0]
                     self.txtfld_SiteName.text = site.snm
                     param.siteId = site.siteId
//                   self.btnSitName.setImage(UIImage(named: "arrowdown"), for: .normal)
//                    self.btnSitName.isHidden = false
                    self.btnSitName.isHidden = true
                    
                    txtfld_City.text = site.city
                    txtfld_Address.text = site.adr
                    txtfld_PostalCode.text = site.zip
                    latitued.text = site.lat
                    longitued.text = site.lng
                    
                    let ctrsname = filterStateAccrdToCountry(serchCourID: (site.ctry)!, searchPredicate: "id", arr: getCountry() as! [Any])
                    let statename = filterStateAccrdToCountry(serchCourID: (site.state)!, searchPredicate: "id", arr: getStates() as! [Any])
                    txtfld_Country.text = ctrsname.count != 0 ? (ctrsname[0] as? [String : Any])!["name"] as? String  : ""
                    txtfld_State.text = statename.count != 0 ? (statename[0] as? [String : Any])!["name"] as? String : ""
                    
                    param.ctry = ctrsname.count>0 ? site.ctry : ""
                    param.state = statename.count>0 ? site.state : ""
              
                 }else{
                    self.txtfld_SiteName.text = ""
                    param.siteId = nil
                    //self.btnSitName.setImage(UIImage(named: "BoxOFUncheck"), for: .normal)
                    self.btnSitName.isHidden = true
                    txtfld_City.text = ""
                    txtfld_Address.text = ""
                    txtfld_PostalCode.text = ""
                    txtfld_Country.text = ""
                    txtfld_State.text = ""
                    param.ctry = nil
                    param.state = nil
                    
                   }
               
           
            break
        case 3: // Contact
            let cltAllContactList  =  arrOfShowData[indexPath.row] as? ClientContactList
            self.txtfld_Contact.text = cltAllContactList?.cnm
            param.cnm = cltAllContactList?.cnm
            param.conId = cltAllContactList?.conId
            self.btnContact.isHidden = true
            txtfld_MobNo.text = cltAllContactList?.mob1 != nil ? cltAllContactList?.mob1 : ""
            txtfld_AltMobNo.text = cltAllContactList?.mob2 != nil ? cltAllContactList?.mob2 : ""
            txtfld_Email.text = cltAllContactList?.email != nil ? cltAllContactList?.email : ""
            
            break
        case 4: // Site
            let cltAllSieList  =  arrOfShowData[indexPath.row] as? ClientSitList
            self.txtfld_SiteName.text = cltAllSieList?.snm
            param.siteId = cltAllSieList?.siteId
            param.snm = cltAllSieList?.snm
            self.btnSitName.isHidden = true
            txtfld_City.text = cltAllSieList?.city != nil ? cltAllSieList?.city : ""
            txtfld_Address.text = cltAllSieList?.adr != nil ? cltAllSieList?.adr : ""
            txtfld_PostalCode.text = cltAllSieList?.zip != nil ? cltAllSieList?.zip : ""
            break
        case 5: // For State
            self.txtfld_State.text =  (arrOfShowData[indexPath.row] as? [String : Any])?["name"] as? String
            param.state = (arrOfShowData[indexPath.row] as? [String : Any])?["id"] as? String
            self.removeOptionalView()
            break
        case 6: // For Country
            self.txtfld_Country.text = (arrOfShowData[indexPath.row] as? [String : Any])?["name"] as? String
            let countryID = (arrOfShowData[indexPath.row] as? [String : Any])?["id"] as? String
            param.ctry = countryID
            let idPredicate: NSPredicate = NSPredicate(format:"self.country_id == %@", countryID! )
            let arrOfstate =  getStates().filtered(using: idPredicate)
            self.txtfld_State.text = (arrOfstate[0] as? [String : Any])?["name"] as? String
            param.state = (arrOfstate[0] as? [String : Any])?["id"] as? String
            self.removeOptionalView()
            break
        case 7:
            
          let isExist = self.FltWorkerId.contains(((self.arrOfShowData[indexPath.row] as? FieldWorkerDetails)?.usrId)!)
            if(!isExist){
                createTags(strName: ((self.arrOfShowData[indexPath.row] as? FieldWorkerDetails)?.fnm)!, view: self.tagView)
                self.FltWorkerId.append(((self.arrOfShowData[indexPath.row] as? FieldWorkerDetails)?.usrId)!)
            }
            self.txtfld_FieldWorker.text = ""
            break
            
            case 8:
                self.scroll_View.isScrollEnabled = true
                
        
                let sltTagsNM = (self.arrOfShowData[indexPath.row] as? TagsList)?.tnm?.capitalizingFirstLetter()


                let isExist =  arrOfaddTags.contains{ ( dict : [String : String]) -> Bool in

                    if dict["tnm"] == sltTagsNM?.capitalizingFirstLetter(){
                        return true
                    }
                    return false
                }
                if(!isExist){
                    self.tagVw_OFTag.addTag(sltTagsNM!.capitalizingFirstLetter(), withHeight: 0, withtagFont: UIFont.systemFont(ofSize: 10.0), withDeleteBtn: true)
                    /*let dict = ["tagId" : String(arrOfaddTags.count + 1),
                     "tnm" : trimValue]*/
                    
                    let dict = ["tagId" : (self.arrOfShowData[indexPath.row] as? TagsList)?.tagId,
                                "tnm" : sltTagsNM?.capitalizingFirstLetter()]
                    
                    arrOfaddTags.append(dict as! [String : String])
                    self.tagVw_OFTag.deleteBlock = {(tagText : String ,idx : Int) -> Void in
                        self.tagVw_OFTag.deleteTag(at: idx)
                        self.arrOfaddTags.remove(at: idx)
                    }
                }
                
                self.taxFieldAddTags.text = ""
            break
            
            
            
            
        default: break
            
        }
              self.removeOptionalView()
    }
    
    func optionView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 38.0
    }
    
    func filterStateAccrdToCountry(serchCourID : String, searchPredicate : String , arr : [Any])-> [Any]{
        let bPredicate: NSPredicate = NSPredicate(format:"self.%@ == %@", searchPredicate ,serchCourID )
        return (arr as NSArray).filtered(using: bPredicate)
        
    }
    
//====================================================
//MARK:-  Create Tags
//====================================================
    func createTags(strName : String , view : ASJTagsView){
        view.addTag(strName, withHeight: 0, withtagFont: UIFont.systemFont(ofSize: 10.0), withDeleteBtn: true)
           view.deleteBlock = {(tagText : String ,idx : Int) -> Void in
           view.deleteTag(at: idx)
          self.FltWorkerId.remove(at: idx)
        }
    }
    
//====================================================
//MARK:- TxtField Delegate Methods
//====================================================

    func openDropDownWhenKeyBordappere(){
        
      if self.sltTxtField.isEqual(txtfld_Client){
            self.removeOptionalView()
            self.openDwopDown( txtField: self.txtfld_Client, arr: arrClintList)
        }else if self.sltTxtField.isEqual(txtfld_Contact){
            self.removeOptionalView()
            if(param.cltId != nil){
                let query = "cltId = '\(param.cltId!)'"
                arrOfShowData = DatabaseClass.shared.fetchDataFromDatabse(entityName: "ClientContactList", query: query) as! [ClientContactList]
                if(arrOfShowData.count > 0){
                    self.openDwopDown( txtField: self.txtfld_Contact, arr: arrOfShowData)
                    
                }else{
                    self.btnContact.isHidden = false
                    self.btnContact.setImage(UIImage(named: "BoxOFUncheck"), for: .normal)
                }
            }
        }else if self.sltTxtField.isEqual(txtfld_SiteName){
            self.removeOptionalView()
            if(param.cltId != nil){
                let query = "cltId = '\(param.cltId!)'"
                arrOfShowData = DatabaseClass.shared.fetchDataFromDatabse(entityName: "ClientSitList", query: query) as! [ClientSitList]
                if(arrOfShowData.count > 0){
                    self.openDwopDown( txtField: self.txtfld_SiteName, arr: arrOfShowData)
                    
                }else{
                    self.btnSitName.isHidden = false
                    self.btnSitName.setImage(UIImage(named: "BoxOFUncheck"), for: .normal)
                }
            }
            
        }else if self.sltTxtField.isEqual(txtfld_Country) {
        self.txtfld_Country.text = ""
         self.txtfld_State.isEnabled = true
            self.removeOptionalView()
            arrOfShowData = getJson(fileName: "countries")["countries"] as! [Any]
            self.openDwopDown( txtField: self.txtfld_Country, arr: arrOfShowData)
        
            
            
        }else if self.sltTxtField.isEqual(txtfld_State){
        self.txtfld_State.text = ""
        if(txtfld_Country.text == nil || txtfld_Country.text == ""){
            self.txtfld_State.isEnabled = false
            ShowError(message: AlertMessage.selectCountry, controller: self)
            return
          }
            self.removeOptionalView()
            let namepredicate: NSPredicate = NSPredicate(format:"self.name == %@", self.txtfld_Country.text! )
            let arr = getCountry().filtered(using: namepredicate)
            if(arr.count > 0){
                let dict = (arr[0] as? [String : String])
                let serchCourID = dict!["id"]
                let bPredicate: NSPredicate = NSPredicate(format:"self.country_id == %@", serchCourID! )
                arrOfShowData =  getStates().filtered(using: bPredicate)
                self.openDwopDown( txtField: self.txtfld_State, arr: arrOfShowData)
            }
      }else if self.sltTxtField.isEqual(taxFieldAddTags) {
        self.removeOptionalView()
         self.arrOfShowData  = DatabaseClass.shared.fetchDataFromDatabse(entityName: "TagsList", query: nil) as! [TagsList]

        //self.arrOfShowData = APP_Delegate.arrOftags
        self.openDwopDown( txtField: self.taxFieldAddTags, arr: self.arrOfShowData)
        
        
      }else{
            self.removeOptionalView()
        }
        
    }

    func textFieldShouldClear(_ textField: UITextField) -> Bool {
        self.removeOptionalView()
        
        if(self.sltTxtField.isEqual(txtfld_Client)){
            self.btnClient.isHidden = true
            self.btnContact.isHidden = true
            self.btnSitName.isHidden = true
            self.param.cltId = nil
            self.param.conId = nil
            self.param.siteId = nil
            self.param.nm = ""
            self.param.cnm = ""
            self.param.snm = ""
            txtfld_MobNo.text = ""
            txtfld_AltMobNo.text = ""
            txtfld_Email.text = ""
            txtfld_City.text = ""
            txtfld_Address.text = ""
            txtfld_Contact.text = ""
            txtfld_SiteName.text = ""
            txtfld_PostalCode.text = ""
            txtfld_Country.text = ""
            txtfld_State.text = ""
            param.ctry = nil
            param.state = nil
            
        }else if(self.sltTxtField.isEqual(txtfld_Contact)){
            self.btnContact.isHidden = true
            self.param.conId = nil
            self.param.cnm = ""
            
            
        }else if(self.sltTxtField.isEqual(txtfld_SiteName)){
            self.btnSitName.isHidden = true
            self.param.siteId = nil
            self.param.snm = ""
            
            
        }
        
        textField.text = ""
        return true
    }
    

//    func textFieldDidBeginEditing(_ textField: UITextField) {
//          self.sltTxtField = textField
//          self.sltDropDownBtnTag = textField.tag
//        if(self.sltTxtField.isEqual(txtfld_Country)){
//            txtfld_Country.text = ""
//        } else if self.sltTxtField.isEqual(txtfld_State){
//            txtfld_State.text = ""
//        }
//          self.removeOptionalView()
//    }
    
    
    func textFieldDidBeginEditing(_ textField: UITextField) {
        self.sltTxtField = textField
        self.sltDropDownBtnTag = textField.tag
        if(self.sltTxtField.isEqual(txtfld_Country)){
            txtfld_Country.text = ""
            param.ctry = nil
        } else if self.sltTxtField.isEqual(txtfld_State){
            txtfld_State.text = ""
            param.state = nil
        }
        self.removeOptionalView()
    }
    
   
    
    
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
         self.sltDropDownBtnTag = textField.tag
        let result = (textField.text as NSString?)?.replacingCharacters(in: range, with: string) ?? string
        
       
        
        if (textField == txtfld_MobNo) || (textField == txtfld_AltMobNo){
            
            if (string != "") && (textField.text?.count)! > 14 {
                return false
            }
            
            let aSet = NSCharacterSet(charactersIn:"0123456789").inverted
            let compSepByCharInSet = string.components(separatedBy: aSet)
            let numberFiltered = compSepByCharInSet.joined(separator: "")
            return string == numberFiltered
        }
        
        if (textField == latitued) || (textField == longitued){
            let insensitiveCount = result.lowercased().filter{ $0 == Character(String(".").lowercased())}
            if insensitiveCount.count > 1 {
                return false
            }
         
            
            let aSet = NSCharacterSet(charactersIn:"0123456789.").inverted
            let compSepByCharInSet = string.components(separatedBy: aSet)
            let numberFiltered = compSepByCharInSet.joined(separator: "")
            return string == numberFiltered
            
        }
        
        if (textField == taxFieldAddTags){
            if result.count > 0 {
                btnAdd.isUserInteractionEnabled = true
                btnAdd.alpha = 1
            }else{
                btnAdd.isUserInteractionEnabled = false
                btnAdd.alpha = 0.4
                
            }
        }
        
        
        

        
        switch self.sltDropDownBtnTag {
        case 0:
            
             let bPredicate: NSPredicate = NSPredicate(format: "self.title beginswith[c] '%@'", result)
             let arrAlljobTittle = DatabaseClass.shared.fetchDataFromDatabse(entityName: "UserJobTittleNm", query: nil) as! [UserJobTittleNm]
            
            arrOfShowData = (arrAlljobTittle as NSArray).filtered(using: bPredicate)
            self.openDwopDown( txtField: self.txtfldJobTitle, arr: arrOfShowData)

            DispatchQueue.main.async{
                if(self.arrOfShowData.count > 0){
                    self.optionalVw?.isHidden = false
                    self.optionalVw?.table_View?.reloadData()
                }else{
                    self.optionalVw?.isHidden = true
                }
            }
            break
        case 2:
            
            
            txtfld_MobNo.text = ""
            txtfld_AltMobNo.text = ""
            txtfld_Email.text = ""
            txtfld_City.text = ""
            txtfld_Address.text = ""
            txtfld_Contact.text = ""
            txtfld_SiteName.text = ""
            txtfld_PostalCode.text = ""
            txtfld_Country.text = ""
            txtfld_State.text = ""
            param.ctry = nil
            param.state = nil


            FltArrClintList = self.filterArrUsingpredicate(txtFid: textField, txt: string , range : range , arr : arrClintList, predecateIdentity: "nm") as! [ClientList]
            if(self.optionalVw == nil){
             self.openDwopDown( txtField: self.txtfld_Client, arr: FltArrClintList)
            }
             self.optionalVw?.isHidden = false
            DispatchQueue.main.async{
                if(self.FltArrClintList.count > 0){
                    
                                       // self.btnClient.isHidden = true
                                         self.btnClient.isHidden = false
                                        self.btnContact.isHidden = true
                                        self.btnSitName.isHidden = true
                    
                    self.btnClient.setImage(UIImage(named: "BoxOFUncheck"), for: .normal)
                    self.param.cltId = nil
                    self.param.nm = result
                    self.param.siteId = nil
                    self.param.snm = "self"
                    self.txtfld_SiteName.text = "self"
                    self.txtfld_SiteName.isUserInteractionEnabled = false
                    self.param.conId = nil
                    self.param.cnm = ""
//                    self.btnClient.setImage(UIImage(named: "arrowdown"), for: .normal)
//                    self.btnContact.setImage(UIImage(named: "arrowdown"), for: .normal)
//                    self.btnSitName.setImage(UIImage(named: "arrowdown"), for: .normal)
//                    self.btnClient.isHidden = false
//                    self.btnContact.isHidden = false
//                    self.btnSitName.isHidden = false
                    self.optionalVw?.table_View?.reloadData()
                }else{
                  if(result != ""){ // When Txtfield emprt remove dropdown buttton
                        self.removeOptionalView()
                        self.btnClient.isHidden = false
//                        self.btnContact.isHidden = false
//                        self.btnSitName.isHidden = false
                        self.btnClient.setImage(UIImage(named: "BoxOFUncheck"), for: .normal)
                        //self.btnContact.setImage(UIImage(named: "BoxOFUncheck"), for: .normal)
                        //self.btnSitName.setImage(UIImage(named: "BoxOFUncheck"), for: .normal)
                        self.param.cltId = nil
                        self.param.nm = result
                    
                        self.param.conId = nil
                        self.param.cnm = ""
                        self.btnContact.isHidden = true
                 
                       // self.param.cnm = self.txtfld_Contact.text?.trimmingCharacters(in: .whitespacesAndNewlines)
                        self.param.siteId = nil
                        self.param.snm = "self"
                        self.txtfld_SiteName.text = "self"
                        self.btnSitName.isHidden = true
                        self.txtfld_SiteName.isUserInteractionEnabled = false
                    }else{
                        self.removeOptionalView()
                        self.param.cltId = nil
                        self.param.siteId = nil
                        self.param.conId = nil
                        self.param.nm = ""
                        self.param.cnm = ""
                        self.param.snm = ""
                        self.btnClient.isHidden = true
                        self.btnContact.isHidden = true
                        self.btnSitName.isHidden = true
                    }
                }
            }
            break
        case 3:
         
                txtfld_MobNo.text = ""
                txtfld_AltMobNo.text = ""
                txtfld_Email.text = ""
 
            if let arr = param.cltId?.components(separatedBy: "-"){
             if(param.cltId != nil && param.cltId != "" && arr[0] != "Client"){
              
                
                let query = "cltId = '\(param.cltId!)'"
                let arrOFFltcontctList = DatabaseClass.shared.fetchDataFromDatabse(entityName: "ClientContactList", query: query) as! [ClientContactList]
                 let bPredicate: NSPredicate = NSPredicate(format: "self.cnm beginswith[c] %@", result)
                arrOfShowData = (arrOFFltcontctList as NSArray).filtered(using: bPredicate)
                if(arrOfShowData.count > 0){
                    if(self.optionalVw == nil){
                       self.openDwopDown( txtField: self.txtfld_Contact, arr: arrOfShowData)
                    }
                    DispatchQueue.main.async{
//                        self.btnContact.isHidden = false
//                        self.btnContact.setImage(UIImage(named: "arrowdown"), for: .normal)
                       // self.btnContact.isHidden = true
                        self.btnContact.isHidden = false
                        self.btnContact.setImage(UIImage(named: "BoxOFUncheck"), for: .normal)
                        self.param.conId = nil
                        self.param.cnm = result
                        self.optionalVw?.table_View?.reloadData()
                    }
                }else{
                    if(result != ""){
                        self.btnContact.setImage(UIImage(named: "BoxOFUncheck"), for: .normal)
                        self.btnContact.isHidden = false
                        param.conId = nil
                        param.cnm = result
                        self.removeOptionalView()
                    }else{
                        self.btnContact.isHidden = true
                        param.conId = nil
                        param.cnm = ""
                        self.removeOptionalView()
                    }

                }

                
            }else{
                self.btnContact.setImage(UIImage(named: "BoxOFUncheck"), for: .normal)
                self.btnContact.isHidden = false
                param.conId = nil
                param.cnm = result
            }
            }else{
                param.conId = nil
                param.cnm = result
            }
   
            break
        case 4:
            
            txtfld_City.text = ""
            txtfld_Address.text = ""
            txtfld_PostalCode.text = ""
            txtfld_Country.text = ""
            txtfld_State.text = ""
            param.ctry = nil
            param.state = nil
            
            
            if let arr = param.cltId?.components(separatedBy: "-"){
                if(param.cltId != nil && param.cltId != "" && arr[0] != "Client"){
                    
                    let query = "cltId = '\(param.cltId!)'"
                    let arrOfSiteNm = DatabaseClass.shared.fetchDataFromDatabse(entityName: "ClientSitList", query: query) as! [ClientSitList]
                    let bPredicate: NSPredicate = NSPredicate(format: "self.snm beginswith[c] %@", result)
                    arrOfShowData = (arrOfSiteNm as NSArray).filtered(using: bPredicate)
                    if(arrOfShowData.count > 0){
                        if(self.optionalVw == nil){
                            self.openDwopDown( txtField: self.txtfld_SiteName, arr: arrOfShowData)
                        }
                        DispatchQueue.main.async{
//                                self.btnSitName.isHidden = false
//                                self.btnSitName.setImage(UIImage(named: "arrowdown"), for: .normal)
                                //self.btnSitName.isHidden = true
                            
                                self.btnSitName.setImage(UIImage(named: "BoxOFUncheck"), for: .normal)
                                self.btnSitName.isHidden = false
                               self.param.siteId = nil
                               self.param.snm = result
                                self.optionalVw?.table_View?.reloadData()
                        }
                    }else{
                        if(result != ""){
                            self.btnSitName.setImage(UIImage(named: "BoxOFUncheck"), for: .normal)
                            self.btnSitName.isHidden = false
                            param.siteId = nil
                            param.snm = result
                            self.removeOptionalView()
                        }else{
                            self.btnSitName.isHidden = true
                            param.siteId = nil
                            param.snm = ""
                            self.removeOptionalView()
                        }
                        
                    }
                    
                }else{
                    self.btnSitName.setImage(UIImage(named: "BoxOFUncheck"), for: .normal)
                    self.btnSitName.isHidden = false
                    param.siteId = nil
                    param.snm = result
                }

            }

            break
        case 5: // State
            
            let namepredicate: NSPredicate = NSPredicate(format:"self.name = %@", txtfld_Country.text! )
            let arr = getCountry().filtered(using: namepredicate)
            if(arr.count > 0){
                self.optionalVw?.isHidden = false
                let dict = (arr[0] as? [String : String])
                let serchCourID = dict!["id"]
                let idPredicate: NSPredicate = NSPredicate(format:"self.country_id == %@", serchCourID! )
                let arrOfstate =  getStates().filtered(using: idPredicate)
                let bPredicate: NSPredicate = NSPredicate(format: "self.name beginswith[c] %@", result)
                arrOfShowData =  ((arrOfstate as NSArray).filtered(using: bPredicate))
                if(self.optionalVw == nil){
                    self.openDwopDownForConstantHeight( txtField: self.txtfld_State, arr: arrOfShowData)
                }
            }
            DispatchQueue.main.async{
                if(self.arrOfShowData.count > 0){
                    self.optionalVw?.isHidden = false
                    self.optionalVw?.table_View?.reloadData()
                }else{
                    self.optionalVw?.isHidden = true
                }
            }
            
            break
        case 6: // Country
            
            let bPredicate: NSPredicate = NSPredicate(format: "self.name beginswith[c] %@", result)
            arrOfShowData =  getCountry().filtered(using: bPredicate)
            if(self.optionalVw == nil){
                self.openDwopDownForConstantHeight( txtField: self.txtfld_Country, arr: arrOfShowData)
            }
            DispatchQueue.main.async{
                if(self.arrOfShowData.count > 0){
                    self.optionalVw?.isHidden = false
                    self.optionalVw?.table_View?.reloadData()
                }else{
                    self.optionalVw?.isHidden = true
                }
            }
            break
        case 7 :
            
            let bPredicate: NSPredicate = NSPredicate(format: "self.fnm beginswith[c] '%@'", result)
            
            let allFldWorkerNm = DatabaseClass.shared.fetchDataFromDatabse(entityName: "FieldWorkerDetails", query: nil) as! [FieldWorkerDetails]
            arrOfShowData =  (allFldWorkerNm as NSArray).filtered(using: bPredicate)
            if(self.optionalVw == nil){
                self.openDwopDown( txtField: self.txtfld_FieldWorker, arr: arrOfShowData)
            }
            DispatchQueue.main.async{
                if(self.arrOfShowData.count > 0){
                    self.optionalVw?.isHidden = false
                    self.optionalVw?.table_View?.reloadData()
                }else{
                    self.optionalVw?.isHidden = true
                }
            }
            break
            
           case 8 :
    
//            arrOfShowData =  APP_Delegate.arrOftags.filter({ (tag : tagElements) -> Bool in
//                let stringMatch = tag.tnm?.lowercased().range(of: result.lowercased())
//                return stringMatch != nil ? true : false
//            })
            
            
            let bPredicate: NSPredicate = NSPredicate(format: "self.tnm beginswith[c] '%@'", result)
            
            let allTags = DatabaseClass.shared.fetchDataFromDatabse(entityName: "TagsList", query: nil) as! [TagsList]
            arrOfShowData =  (allTags as NSArray).filtered(using: bPredicate)
            

            if(self.optionalVw == nil){
                
                self.openDwopDown( txtField: self.taxFieldAddTags, arr: arrOfShowData)
            }
            DispatchQueue.main.async{
                if(self.arrOfShowData.count > 0){
                    self.optionalVw?.isHidden = false
                    self.optionalVw?.table_View?.reloadData()
                }else{
                        self.removeOptionalView()
                 }
               }
        
            break
        default:
            
            break
        }
        
       

        return true
    }
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        return true
    }
    
    
    func filterArrUsingpredicate(txtFid : UITextField? , txt : String , range : NSRange? , arr : [Any] , predecateIdentity : String) -> [Any]{
        
        let predicateStr: NSString;
        if(txtFid != nil && range != nil){
             predicateStr =
                (txtFid!.text as NSString?)!.replacingCharacters(in: range!, with: txt) as NSString
        }else{
            predicateStr = txt as NSString
        }
        
        let bPredicate: NSPredicate = NSPredicate(format: "self.%@ contains[c] %@", predecateIdentity ,predicateStr)
    
            return (arr as NSArray).filtered(using: bPredicate)
    }
    
    
    func getPriortyRawValueAccordingToText(txt : String) -> Int{
        switch txt {
        case "Low" :
            return taskPriorities.Low.rawValue
        case "Medium" :
            return taskPriorities.Medium.rawValue
        case "High" :
            return taskPriorities.High.rawValue
        default:
             return 0
        }
    }
    
    
//=====================================
// MARK:- Create Job list  Service
//=====================================
    /*

     parentId -> paraent job if (0 if not have)
     compId -> company id
     cltId -> client id
     siteId -> site id
     conId -> contact id
     quotId -> quotation id
     jtId -> Job title id
     des -> description
     type -> 1 - Single Member and 2 - Multiple member
     prty -> 1 - Low , 2 - Medium, 3 - High and 4 - Urgent
     status -> 1 - Not Started, 2 - Accepted, 3 - Reject , 4 - Cancel, 5 - Travelling, 6 - Break, 7 - In Progress , 8 - Pending, 9 - Completed, 10- Closed
     athr -> author
     kpr -> keeper
     schdlStart -> shedule start
     schdlEnd -> shedule finish
     inst -> job instruction
     nm -> client name
     cnm -> contact name
     snm -> site name
     email -> email
     mob1 -> mobile no.1
     mob2 -> mobile no.2
     adr -> address
     city -> city
     state -> state
     ctry -> country
     zip -> zipcode
     memIds -> members id array
     
     clientForFuture -> 0 - not and 1 -yes
     siteForFuture -> 0 - not and 1 -yes
     contactForFuture -> 0 - not and 1 -yes
     
   
     pymtType -> payment type (accId)
     gstNo -> GST Number
     tinNo - >TIN number
     industry -> Industry
     note -> some text
     fax -> fax number
     twitter -> twitter id
     skype -> skype id


 */
    
    
    func getTempIdForNewJob(newId : Int) -> String {
        
        return "Job-\(String(describing: getUserDetails()?.usrId ?? ""))-\(getCurrentTimeStamp())"
        
       // let searchQuery = "jobId = 'Job-\(newId)'"
//        let searchQuery = String.init(format: "parametres contains[c] '\"jobId\":\"Job-%d\'",newId)
//        let isExist = DatabaseClass.shared.fetchDataFromDatabse(entityName: "OfflineList", query: searchQuery) as! [OfflineList]
//        if isExist.count == 0 {
//            return "Job-\(newId)"
//        }else{
//           return getTempIdForNewJob(newId: newId + 1)
//        }
    }
    

    func addJob(){
        
        let temp = getTempIdForNewJob(newId: 0)
        param.tempId = temp
        param.jobId = temp
        param.adr = self.txtfld_Address.text?.trimmingCharacters(in: .whitespacesAndNewlines)
        param.athr = getUserDetails()?.usrId
        param.city = self.txtfld_City.text?.trimmingCharacters(in: .whitespacesAndNewlines)
        param.cltId =  param.cltId == nil ?  "" : param.cltId
        param.conId =  param.conId == nil ? "" :  param.conId
        param.siteId = param.siteId == nil ? "" : param.siteId
        
        param.cnm = (param.conId == "" ?  (param.cnm == "" ? "self" : param.cnm) : "")
        param.snm = param.siteId == "" ? param.snm : ""

        
        param.des =  txtfld_JobDesc.text?.trimmingCharacters(in: .whitespacesAndNewlines)
        param.email = self.txtfld_Email.text?.trimmingCharacters(in: .whitespacesAndNewlines)
        param.inst = self.txtfld_JobInstruction.text?.trimmingCharacters(in: .whitespacesAndNewlines)
        ///param.jtId = param.jtId == nil ?  "" : param.jtId
        
        

        param.kpr = FltWorkerId.count == 0 ? "" : (FltWorkerId.count == 1 ? FltWorkerId[0] : "")
        param.mob1 = self.txtfld_MobNo.text?.trimmingCharacters(in: .whitespacesAndNewlines)
        param.mob2 = self.txtfld_AltMobNo.text?.trimmingCharacters(in: .whitespacesAndNewlines)
        param.parentId = ""
        param.prty =  String(format: "%d",getPriortyRawValueAccordingToText(txt: (txtfld_JobPriority.text?.trimmingCharacters(in: .whitespacesAndNewlines))!)) // no
        param.quotId = param.quotId == nil ? "" :  param.quotId
        param.siteId = param.siteId == nil ? "" : param.siteId
        param.snm = param.siteId == "" ? param.snm : ""
        param.status = "1"
        param.type = FltWorkerId.count == 0 ? "1"  : (FltWorkerId.count == 1 ? "1" : "2")// no
        param.zip = self.txtfld_PostalCode.text?.trimmingCharacters(in: .whitespacesAndNewlines)
        param.updateDate = String(Int(Date().timeIntervalSince1970))
        //param.title = self.txtfldJobTitle.text
        
        
            let schStartDate = String(format: "%@ %@",  (self.lbl_SrtSchDate.text == nil ? "" : self.lbl_SrtSchDate.text! ) , (self.lbl_SrtSchTime.text == nil ? "" : self.lbl_SrtSchTime.text!))
            let schEndDate = String(format: "%@ %@",  (self.lbl_EndSchDate.text == "" ? "" : self.lbl_EndSchDate.text!) , (self.lbl_EndSchTime.text == "" ? "" : self.lbl_EndSchTime.text!) )
            
            
            var schTime12 = ""
            var endTime12 = ""
            
        if isClear == false{
            
            if schStartDate == "yyyy-MM-dd 00:00"{
                ShowAlert(title: LanguageKey.dialog_alert, message: AlertMessage.selectStartDate, controller: windowController, cancelButton:  LanguageKey.ok as NSString, okButton: nil, style: .alert,callback: {_,_ in})
                return
            }
            
            if schEndDate == "yyyy-MM-dd 00:00"{
                ShowAlert(title: LanguageKey.dialog_alert, message: AlertMessage.selectEndDate, controller: windowController, cancelButton:  LanguageKey.ok as NSString, okButton: nil, style: .alert,callback: {_,_ in})
                return
            }
            
            
            let value = compareTwodate(schStartDate:schStartDate , schEndDate: schEndDate, dateFormate: DateFormate.yyyy_MM_dd_h_mm_a)
            if(value == "orderedDescending") || (value == "orderedSame"){
                ShowAlert(title: LanguageKey.dialog_alert, message: AlertMessage.dateMustBeGreater, controller: windowController, cancelButton:  LanguageKey.ok as NSString, okButton: nil, style: .alert,callback: {_,_ in})
                return
            }
            else{
                
                let dateFormatter = DateFormatter()
                dateFormatter.dateFormat = "h:mm a"
                if let langCode = getCurrentSelectedLanguageCode() {
                    dateFormatter.locale = Locale(identifier: langCode)
                }
                let date = dateFormatter.date(from: self.lbl_SrtSchTime.text!)
                dateFormatter.dateFormat = "HH:mm:ss"
                schTime12 = dateFormatter.string(from: date!)
                //print(schTime12)
                
                
                let dateFormatter1 = DateFormatter()
                dateFormatter1.dateFormat = "h:mm a"
                if let langCode = getCurrentSelectedLanguageCode() {
                    dateFormatter1.locale = Locale(identifier: langCode)
                }
                let date1 = dateFormatter1.date(from: self.lbl_EndSchTime.text!)
                dateFormatter1.dateFormat = "HH:mm:ss"
                endTime12 = dateFormatter1.string(from: date1!)
                //print(endTime12)
                
                param.schdlStart = isClear ? "" : (self.lbl_SrtSchDate.text! + " " + schTime12)
                param.schdlFinish = isClear ? "" : (self.lbl_EndSchDate.text! + " " + endTime12)
                
                //2018-08-09 15:27:00
                
//                
                if param.schdlStart != "" {
                    param.schdlStart = convertDateStringToTimestamp(dateString: param.schdlStart!)
                }
                
                if param.schdlFinish != "" {
                    param.schdlFinish = convertDateStringToTimestamp(dateString: param.schdlFinish!)
                }
            }
        }else{
            param.schdlStart = ""
            param.schdlFinish = ""
        }
        
     
        param.tagData = arrOfaddTags.count == 0 ? [] : arrOfaddTags 
        param.lat = latitued.text
        param.lng = longitued.text
        param.landmark = trimString(string: txt_landmark.text!)
   
        let isExist = self.FltWorkerId.contains((getUserDetails()?.usrId)!)
        if(isExist){
            let userJobs = DatabaseClass.shared.createEntity(entityName: "UserJobList")
            userJobs?.setValuesForKeys(param.toDictionary!)
            DatabaseClass.shared.saveEntity(callback: {_ in
                if self.callbackForJobVC != nil {
                    self.callbackForJobVC!(true)
                }
            })
        }else{
//            if(param.kpr == getUserDetails()?.usrId){
//                let userJobs = DatabaseClass.shared.createEntity(entityName: "UserJobList")
//                userJobs?.setValuesForKeys(param.toDictionary!)
//                DatabaseClass.shared.saveEntity()
//
//                if self.callbackForJobVC != nil {
//                    self.callbackForJobVC!(true)
//                }
//            }
        }
        
       
        
      //  param.schdlStart = isClear ? "" : (self.lbl_SrtSchDate.text! + " " + schTime12)
      //  param.schdlFinish = isClear ? "" : (self.lbl_EndSchDate.text! + " " + endTime12)
        
        if isClear {
            param.schdlStart =  ""
            param.schdlFinish =  ""
        }else{
            
            param.schdlStart = convertDateToStringForServerAddJob(dateStr: (self.lbl_SrtSchDate.text! + " " + schTime12))
            param.schdlFinish = convertDateToStringForServerAddJob(dateStr: (self.lbl_EndSchDate.text! + " " + endTime12))
        }
        
        
        param.nm =  param.cltId == "" ? param.nm : ""
        param.compId = getUserDetails()?.compId
        param.memIds =  (FltWorkerId.count == 0 ? [] : (FltWorkerId.count == 1 ? [] : FltWorkerId))
        param.clientForFuture =  isClintFutUser ? "1" : "0"
        param.siteForFuture = (isSitFutUser ? "1" : ( isClintFutUser ? "1" : "0"))
        param.contactForFuture = (isContactFutUser ? "1" : ( isClintFutUser ? "1" : "0"))
       // param.tagData = arrOfaddTags.count == 0 ? [] : arrOfaddTags as! [[String : String]]
        param.pymtType = ""
        param.gstNo = ""
        param.tinNo = ""
        param.industry = ""
        param.note = ""
        param.fax = ""
        param.twitter = ""
        param.skype = ""
        param.tempId = param.jobId
        
        param.dateTime =  currentDateTime24HrsFormate()

        
        var dict =  param.toDictionary
        var ids = [String]()
        let titles : [[String : String]] = dict!["jtId"] as! [[String : String]]
        
        for title in titles {
            ids.append(title["jtId"]!)
        }
        dict!["jtId"] = ids
        
        
        let userJobs = DatabaseClass.shared.createEntity(entityName: "OfflineList") as! OfflineList
        userJobs.apis = Service.addJob
        userJobs.parametres = dict?.toString
        userJobs.time = Date()
        
        DatabaseClass.shared.saveEntity(callback: {_ in
            DatabaseClass.shared.syncDatabase()
            self.navigationController?.popViewController(animated: true)
        })
        
    }

    
    
//=====================================
// MARK:- Get Job Tittle  Service
//=====================================
    
    func getJobTittle(){
        /*
         compId -> Company id
         limit -> limit
         index -> index value
         search -> search value
         dateTime -> date time

 */
        if !isHaveNetowork() {
            return
        }
    
        let lastRequestTime : String? = UserDefaults.standard.value(forKey: Service.getJobTitleList) as? String
        
        let param = Params()
        param.compId = getUserDetails()?.compId
        param.limit = ""
        param.index = "0"
        param.search = ""
        param.dateTime = lastRequestTime ?? ""

        serverCommunicator(url: Service.getJobTitleList, param: param.toDictionary) { (response, success) in
            if(success){
                let decoder = JSONDecoder()
                if let decodedData = try? decoder.decode(ViewControllerResponse.self, from: response as! Data) {
                    if decodedData.success == true{
                        //Request time will be update when data comes otherwise time won't be update
                        UserDefaults.standard.set(CurrentDateTime(), forKey: Service.getJobTitleList)
                        if decodedData.data?.count != 0 {
                            self.saveUserJobsTittleNmInDataBase(data: decodedData.data!)
                          
                        }
                    }else{
                        //ShowError(message: getServerMsgFromLanguageJson(key: decodedData.message!)!, controller: windowController)
                        
                            killLoader()
                            if let code =  decodedData.statusCode{
                                if(code == "401"){
                                    ShowAlert(title: getServerMsgFromLanguageJson(key: decodedData.message!), message:"" , controller: windowController, cancelButton:  LanguageKey.ok as NSString, okButton: nil, style: .alert, callback: { (Ok, Cancel) in
                                        if (Ok){
                                            DispatchQueue.main.async {
                                                (UIApplication.shared.keyWindow?.rootViewController as! UINavigationController).popViewController(animated: true)
                                            }
                                        }
                                    })
                                }
                            }else{
                                ShowError(message:  getServerMsgFromLanguageJson(key: decodedData.message!)!, controller: windowController)
                            }
                        }
                    
                
                }else{
                    //ShowAlert(title: "formate problem", message: "Please try again!", controller: windowController, cancelButton: "Ok", okButton: nil, style: UIAlertControllerStyle.alert, callback: {_,_ in})
                }
            }else{
                //ShowAlert(title: "Network Error", message: "Please try again!", controller: windowController, cancelButton: "Ok", okButton: nil, style: UIAlertControllerStyle.alert, callback: {_,_ in})
            }
        }
    }
    
    //==============================
    // MARK:- Save data in DataBase
    //==============================
    func saveUserJobsTittleNmInDataBase( data : [jobTittleListData]) -> Void {
        for jobs in data{
            let query = "jtId = '\(jobs.jtId!)'"
            let isExist = DatabaseClass.shared.fetchDataFromDatabse(entityName: "UserJobTittleNm", query: query) as! [UserJobTittleNm]
            if isExist.count > 0 {
                let existingJob = isExist[0]
                existingJob.setValuesForKeys(jobs.toDictionary!)
                //DatabaseClass.shared.saveEntity()
            }else{
                let userJobs = DatabaseClass.shared.createEntity(entityName: "UserJobTittleNm")
                userJobs?.setValuesForKeys(jobs.toDictionary!)
               // DatabaseClass.shared.saveEntity()
            }
        }
        
         DatabaseClass.shared.saveEntity(callback: {_ in})
    }
    
    
    //=====================================
    // MARK:- Get Field Worker List Service
    //=====================================
    
    func getFieldWorkerList(){
        /*
         compId -> company id
         limit -> limit (No. of rows)
         index -> index value
         search -> search value
         */
        
        if !isHaveNetowork() {
            return
        }
        let lastRequestTime : String? = UserDefaults.standard.value(forKey: Service.getFieldWorkerList) as? String

        let param = Params()
        param.compId = getUserDetails()?.compId
        param.limit = ""
        param.index = "0"
        param.search = ""
        param.dateTime = lastRequestTime ?? ""
        
    
        
        serverCommunicator(url: Service.getFieldWorkerList, param: param.toDictionary) { (response, success) in
            if(success){
                let decoder = JSONDecoder()
                if let decodedData = try? decoder.decode(FldWorkerData.self, from: response as! Data) {
                    
                    if decodedData.success == true{
                        
                        //Request time will be update when data comes otherwise time won't be update
                        UserDefaults.standard.set(CurrentDateTime(), forKey: Service.getFieldWorkerList)
                            if decodedData.data?.count != 0 {
                                self.saveUserFieldWorkerNmInDataBase(data: decodedData.data!)
                                
                            }
                    }else{
                        
                        killLoader()
                        if let code =  decodedData.statusCode{
                            if(code == "401"){
                                ShowAlert(title: getServerMsgFromLanguageJson(key: decodedData.message!), message:"" , controller: windowController, cancelButton:  LanguageKey.ok as NSString, okButton: nil, style: .alert, callback: { (Ok, Cancel) in
                                    if (Ok){
                                        DispatchQueue.main.async {
                                            (UIApplication.shared.keyWindow?.rootViewController as! UINavigationController).popViewController(animated: true)
                                        }
                                    }
                                })
                            }
                        }else{
                            ShowError(message: getServerMsgFromLanguageJson(key: decodedData.message!)!, controller: windowController)
                        }
                    }
                }else{
                    ShowAlert(title: AlertMessage.formatProblem, message: "", controller: windowController, cancelButton:  LanguageKey.ok as NSString, okButton: nil, style: UIAlertController.Style.alert, callback: {_,_ in})
                }
            }else{
               //ShowError(message: "Please try again!", controller: windowController)
            }
        }
    }
    

    //==============================
    // MARK:- Save data in DataBase
    //==============================
    func saveUserFieldWorkerNmInDataBase( data : [FldWorkerDetailsList] ) -> Void {
        
        for jobs in data{
            let query = "usrId = '\(jobs.usrId!)'"
            let isExist = DatabaseClass.shared.fetchDataFromDatabse(entityName: "FieldWorkerDetails", query: query) as! [FieldWorkerDetails]
            if isExist.count > 0 {
                let existingJob = isExist[0]
                existingJob.setValuesForKeys(jobs.toDictionary!)
               // DatabaseClass.shared.saveEntity()
            }else{
                let userJobs = DatabaseClass.shared.createEntity(entityName: "FieldWorkerDetails")
                userJobs?.setValuesForKeys(jobs.toDictionary!)
               // DatabaseClass.shared.saveEntity()
            }
        }
        
        DatabaseClass.shared.saveEntity(callback: { _ in})
    }
    
    
    //=====================================
    // MARK:- get All Added Tags
    //=====================================
    
    func getTagListService(){
        
        if !isHaveNetowork() {
            return
        }
        
        /*
         "compId -> Company id
         limit -> limit
         index -> index value
         search -> search value"
         */
        let lastRequestTime : String? = UserDefaults.standard.value(forKey: Service.jobTagList) as? String

        let param = Params()
        param.compId = getUserDetails()?.compId
        param.limit = ""
        param.index = "0"
        param.search = ""
        param.dateTime = lastRequestTime ?? ""

        serverCommunicator(url: Service.jobTagList, param: param.toDictionary) { (response, success) in
            if(success){
                let decoder = JSONDecoder()
                if let decodedData = try? decoder.decode(tagListResponse.self, from: response as! Data) {
                    if decodedData.success == true{
                        killLoader()
                    UserDefaults.standard.set(CurrentDateTime(), forKey: Service.jobTagList)
                            if decodedData.data?.count != 0 {
                                 self.saveTagsNmInDataBase(data: decodedData.data!)
                            }
                    }else{
                        killLoader()
                        if let code =  decodedData.statusCode{
                            if(code == "401"){
                                ShowAlert(title: getServerMsgFromLanguageJson(key: decodedData.message!), message:"" , controller: windowController, cancelButton:  LanguageKey.ok as NSString, okButton: nil, style: .alert, callback: { (Ok, Cancel) in
                                    if (Ok){
                                        DispatchQueue.main.async {
                                            (UIApplication.shared.keyWindow?.rootViewController as! UINavigationController).popViewController(animated: true)
                                        }
                                    }
                                })
                            }
                        }else{
                            ShowError(message:  getServerMsgFromLanguageJson(key: decodedData.message!)!, controller: windowController)
                        }
                    }
                }else{
                    
                    ShowAlert(title: AlertMessage.formatProblem, message: "", controller: windowController, cancelButton:  LanguageKey.ok as NSString, okButton: nil, style: UIAlertController.Style.alert, callback: {_,_ in})
                }
            }else{
                killLoader()
                ShowAlert(title: errorString, message: "", controller: windowController, cancelButton:  LanguageKey.ok as NSString, okButton: nil, style: UIAlertController.Style.alert, callback: { (cancelButton, okButton) in
                    if cancelButton {
                        showLoader()
                        self.getTagListService()
                    }
                })
            }
        }
    }
    
    func saveTagsNmInDataBase( data : [tagElements]) -> Void {
        
        for jobs in data{
            let query = "tagId = '\(jobs.tagId!)'"
            let isExist = DatabaseClass.shared.fetchDataFromDatabse(entityName: "TagsList", query: query) as! [TagsList]
            if isExist.count > 0 {
                let existingJob = isExist[0]
                existingJob.setValuesForKeys(jobs.toDictionary!)
               // DatabaseClass.shared.saveEntity()
            }else{
                let userJobs = DatabaseClass.shared.createEntity(entityName: "TagsList")
                userJobs?.setValuesForKeys(jobs.toDictionary!)
                //DatabaseClass.shared.saveEntity()
            }
        }
          DatabaseClass.shared.saveEntity(callback: { _ in})
    }

    //=======================
    // MARK:- Other methods
    //=======================
    func getClintListFrmDB() -> Void {
        let query = "isactive = 1"
        arrClintList = DatabaseClass.shared.fetchDataFromDatabse(entityName: "ClientList", query: query) as! [ClientList]
        FltArrClintList = arrClintList
    }
    
    
    //=====================================
    // MARK:- Get Clint List Service
    //=====================================
    
    func getClientSink(){
        /*
         "compId -> company id
         limit -> limit (No. of rows)
         index -> index value
         search -> search value
         isactive ->0 - deactive clients,1 - active clients, no value - all clients "
         */
        
        if !isHaveNetowork() {
            return
        }
        
        let lastRequestTime : String? = UserDefaults.standard.value(forKey: Service.getClientSink) as? String
        
        let param = Params()
        param.compId = getUserDetails()?.compId
        param.limit = ""
        param.index = "0"
        param.search = ""
        param.isactive = ""
        param.dateTime = lastRequestTime ?? ""
        
        
        serverCommunicator(url: Service.getClientSink, param: param.toDictionary) { (response, success) in
            if(success){
                let decoder = JSONDecoder()

                if let decodedData = try? decoder.decode(ClientResponse.self, from: response as! Data) {
                    if decodedData.success == true{
                        
                        //Request time will be update when data comes otherwise time won't be update
                        UserDefaults.standard.set(CurrentDateTime(), forKey: Service.getClientSink)
                        if decodedData.data.count > 0 {
                            self.saveClintInDataBase(data: decodedData.data)
                            self.getClintListFrmDB()
                        }else{
                           
                        }
                    }else{
                       // ShowError(message: getServerMsgFromLanguageJson(key: decodedData.message!)!, controller: windowController)
                        
                            killLoader()
                            if let code =  decodedData.statusCode{
                                if(code == "401"){
                                    ShowAlert(title: getServerMsgFromLanguageJson(key: decodedData.message!), message:"" , controller: windowController, cancelButton:  LanguageKey.ok as NSString, okButton: nil, style: .alert, callback: { (Ok, Cancel) in
                                        if (Ok){
                                            DispatchQueue.main.async {
                                                (UIApplication.shared.keyWindow?.rootViewController as! UINavigationController).popViewController(animated: true)
                                            }
                                        }
                                    })
                                }
                            }else{
                                ShowError(message:  getServerMsgFromLanguageJson(key: decodedData.message!)!, controller: windowController)
                            }
                        }
                    }
        else{
                    ShowAlert(title: AlertMessage.formatProblem, message: "", controller: windowController, cancelButton:  LanguageKey.ok as NSString, okButton: nil, style: UIAlertController.Style.alert, callback: {_,_ in})
                }
            }else{
                //ShowError(message: "Please try again!", controller: windowController)
            }
        }
    }
    
    //==============================
    // MARK:- Save data in DataBase
    //==============================
    func saveClintInDataBase( data : [ClientListData]) -> Void {
        
        for jobs in data{
            let query = "cltId = '\(jobs.cltId!)'"
            let isExist = DatabaseClass.shared.fetchDataFromDatabse(entityName: "ClientList", query: query) as! [ClientList]
            if isExist.count > 0 {
                if(jobs.isdelete == "0"){
                    let existingJob = isExist[0]
                    DatabaseClass.shared.deleteEntity(object: existingJob, callback: { (_) in})
                    
                }else{
                    let existingJob = isExist[0]
                    existingJob.setValuesForKeys(jobs.toDictionary!)
                    //DatabaseClass.shared.saveEntity()
                }
                
            }else{
                if(jobs.isdelete != "0"){
                    let userJobs = DatabaseClass.shared.createEntity(entityName: "ClientList")
                    userJobs?.setValuesForKeys(jobs.toDictionary!)
                   // DatabaseClass.shared.saveEntity()
                }
            }
        }
         DatabaseClass.shared.saveEntity(callback: { _ in})
    }

    
    //=====================================
    // MARK:- Get Clint Sit List  Service
    //=====================================
    
    func getClientSiteSink(){
        /*
         compId-> company id
         limit->limit
         index->index
         dateTime->date time (only for update)
         */
        
        if !isHaveNetowork() {
            return
        }
        
        let param = Params()
        let lastRequestTime : String? = UserDefaults.standard.value(forKey: Service.getClientSiteSink) as? String
        
        param.compId = getUserDetails()?.compId
        param.limit = ""
        param.index = ""
        param.dateTime = lastRequestTime ?? ""
        
        
        serverCommunicator(url: Service.getClientSiteSink, param: param.toDictionary) { (response, success) in
            if(success){
                let decoder = JSONDecoder()
                if let decodedData = try? decoder.decode(SiteVCResp.self, from: response as! Data) {
                    if decodedData.success == true{
                        
                        if decodedData.data.count > 0 {
                            self.saveSiteInDataBase(data: decodedData.data)
                        }
                        
                        UserDefaults.standard.set(CurrentDateTime(), forKey: Service.getClientSiteSink)
                     }else{
                            killLoader()
                            if let code =  decodedData.statusCode{
                                if(code == "401"){
                                    ShowAlert(title: getServerMsgFromLanguageJson(key: decodedData.message!), message:"" , controller: windowController, cancelButton:  LanguageKey.ok as NSString, okButton: nil, style: .alert, callback: { (Ok, Cancel) in
                                        if (Ok){
                                            DispatchQueue.main.async {
                                                (UIApplication.shared.keyWindow?.rootViewController as! UINavigationController).popViewController(animated: true)
                                            }
                                        }
                                    })
                                }
                            }else{
                                ShowError(message:  getServerMsgFromLanguageJson(key: decodedData.message!)!, controller: windowController)
                            }
                        }
                }else{
                    ShowAlert(title: AlertMessage.formatProblem, message: "", controller: windowController, cancelButton:  LanguageKey.ok as NSString, okButton: nil, style: UIAlertController.Style.alert, callback: {_,_ in})
                }
            }else{
                //  ShowAlert(title: "Network Error", message: "Please try again!", controller: windowController, cancelButton: "Ok", okButton: nil, style: UIAlertControllerStyle.alert, callback: {_,_ in})
            }
        }
        // }
    }
    
    //==============================
    // MARK:- Save data in DataBase
    //==============================
    func saveSiteInDataBase( data : [SiteVCRespDetails] ) -> Void {
        for jobs in data{
            let query = "siteId = '\(jobs.siteId!)'"
            let isExist = DatabaseClass.shared.fetchDataFromDatabse(entityName: "ClientSitList", query: query) as! [ClientSitList]
            if isExist.count > 0 {
                if(jobs.isdelete == "0"){
                    let existingJob = isExist[0]
                    DatabaseClass.shared.deleteEntity(object: existingJob, callback: { (_) in})
                }else{
                    let existingJob = isExist[0]
                    existingJob.setValuesForKeys(jobs.toDictionary!)
                   // DatabaseClass.shared.saveEntity()
                }
            }else{
                if(jobs.isdelete != "0"){
                    let userJobs = DatabaseClass.shared.createEntity(entityName: "ClientSitList")
                    userJobs?.setValuesForKeys(jobs.toDictionary!)
                   // DatabaseClass.shared.saveEntity()
                }
            }
        }

        DatabaseClass.shared.saveEntity(callback: { _ in})

    }
    
    //=====================================
    // MARK:- Get Contact List  Service
    //=====================================
    
    func getClientContactSink(){
        /*
         compId-> company id
         limit->limit
         index->index
         dateTime->date time (only for update)
         */
        
        if !isHaveNetowork() {
            return
        }
        
        let param = Params()
        let lastRequestTime : String? = UserDefaults.standard.value(forKey: Service.getClientContactSink) as? String
        
        param.compId = getUserDetails()?.compId
        param.limit = ""
        param.index = ""
        param.dateTime = lastRequestTime ?? ""
        
        serverCommunicator(url: Service.getClientContactSink, param: param.toDictionary) { (response, success) in
            if(success){
                let decoder = JSONDecoder()
                if let decodedData = try? decoder.decode(ContactResps.self, from: response as! Data) {
                    if decodedData.success == true{
                        
                        DatabaseClass.shared.saveEntity(callback: { _ in
                            
                            if decodedData.data.count > 0 {
                                self.saveUserContactInDataBase(data: decodedData.data)
                            }
                            
                            //Request time will be update when data comes otherwise time won't be update
                            UserDefaults.standard.set(CurrentDateTime(), forKey: Service.getClientContactSink)
                            
                        })
                    
                    }else{
                        //ShowError(message: getServerMsgFromLanguageJson(key: decodedData.message!)!, controller: windowController)
                        
                            killLoader()
                            if let code =  decodedData.statusCode{
                                if(code == "401"){
                                    ShowAlert(title: getServerMsgFromLanguageJson(key: decodedData.message!), message:"" , controller: windowController, cancelButton:  LanguageKey.ok as NSString, okButton: nil, style: .alert, callback: { (Ok, Cancel) in
                                        if (Ok){
                                            DispatchQueue.main.async {
                                                (UIApplication.shared.keyWindow?.rootViewController as! UINavigationController).popViewController(animated: true)
                                            }
                                        }
                                    })
                                }
                            }else{
                                ShowError(message:  getServerMsgFromLanguageJson(key: decodedData.message!)!, controller: windowController)
                            }
                        }
                
                }else{
                    ShowAlert(title: AlertMessage.formatProblem, message: "", controller: windowController, cancelButton:  LanguageKey.ok as NSString, okButton: nil, style: UIAlertController.Style.alert, callback: {_,_ in})
                }
            }else{
                //ShowError(message: "Please try again!", controller: windowController)
            }
        }
        //  }
    }
    
    //==============================
    // MARK:- Save contact data in DataBase
    //==============================
    func saveUserContactInDataBase( data : [ContactRespsDetails]) -> Void {
        
        for jobs in data{
            let query = "conId = '\(jobs.conId!)'"
            let isExist = DatabaseClass.shared.fetchDataFromDatabse(entityName: "ClientContactList", query: query) as! [ClientContactList]
            if isExist.count > 0 {
                
                if(jobs.isdelete == "0"){
                    let existingJob = isExist[0]
                    DatabaseClass.shared.deleteEntity(object: existingJob, callback: { (_) in})
                }else{
                    let existingJob = isExist[0]
                    existingJob.setValuesForKeys(jobs.toDictionary!)
                    //DatabaseClass.shared.saveEntity()
                }
                
            }else{
                if(jobs.isdelete != "0"){

                    let userJobs = DatabaseClass.shared.createEntity(entityName: "ClientContactList")
                    userJobs?.setValuesForKeys(jobs.toDictionary!)
                    //DatabaseClass.shared.saveEntity()
                }
            }
        }
        
         DatabaseClass.shared.saveEntity(callback: { _ in})
        
    }
    
    //========================================
    //MARK:-  Stop Copy Paste of Numbers Filed
    //========================================
    
    override func canPerformAction(_ action: Selector, withSender sender: Any?) -> Bool {
        if txtfld_MobNo.isFirstResponder || txtfld_AltMobNo.isFirstResponder || txtfld_PostalCode.isFirstResponder {
            DispatchQueue.main.async(execute: {
                (sender as? UIMenuController)?.setMenuVisible(false, animated: false)
            })
            return false
        }
        
        return super.canPerformAction(action, withSender: sender)
    }
    
    
    
    
    //========================================
    //MARK:-  Key Board notification method
    //========================================
    @objc func keyboardWillShow(notification: NSNotification) {
        
        
        
        if ((notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue)?.cgRectValue) != nil {
            let userInfo = notification.userInfo!
            var keyboardFrame:CGRect = (userInfo[UIResponder.keyboardFrameBeginUserInfoKey] as! NSValue).cgRectValue
            keyboardFrame = self.view.convert(keyboardFrame, from: nil)
            
            var visibleRect = self.view.frame;
            visibleRect.size.height -= keyboardFrame.size.height + 30;
            
            var frameFrmScrollView = self.sltTxtField.convert(self.sltTxtField.bounds, to:self.scroll_View)
            frameFrmScrollView.origin.y += 150.0  // 150 DropDown Height

            var frameFrmView = self.sltTxtField.convert(self.sltTxtField.bounds, to:self.view)
            frameFrmView.origin.y += (150.0 + self.sltTxtField.frame.size.height + 20)
            
            if(visibleRect.size.height <= frameFrmView.origin.y){
                    let scrollPoint = CGPoint(x: 0.0, y: ((frameFrmScrollView.origin.y + frameFrmScrollView.size.height) - visibleRect.size.height) + 20)
                    self.scroll_View.setContentOffset(scrollPoint, animated: true)
                
            }
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) { // 0.2 Time Delay
                self.openDropDownWhenKeyBordappere()
                
            }
        }
    }
    
    @objc func keyboardWillHide(notification: NSNotification) {
        self.removeOptionalView()
    }
}





