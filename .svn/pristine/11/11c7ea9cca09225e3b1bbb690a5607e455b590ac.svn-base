import UIKit

/// View controller used for showing info text and loading animation.
public final class MessageViewController: UIViewController {
  // Image tint color for all the states, except for `.notFound`.
  public var regularTintColor: UIColor = .black
  // Image tint color for `.notFound` state.
  public var errorTintColor: UIColor = .red
  // Customizable state messages.
  public var messages = StateMessageProvider()
  
  // MARK: - UI properties

  /// Text label.
  public private(set) lazy var textLabel: UILabel = self.makeTextLabel()
  /// Info image view.
  public private(set) lazy var imageView: UIImageView = self.makeImageView()
  /// Border view.
  public private(set) lazy var borderView: UIView = self.makeBorderView()
   /// TextField .
  public private(set) lazy var textField: UITextField = self.makeTextField()

  /// Blur effect view.
  private lazy var blurView: UIVisualEffectView = .init(effect: UIBlurEffect(style: .dark))
  // Constraints that are activated when the view is used as a footer.
  private lazy var collapsedConstraints: [NSLayoutConstraint] = self.makeCollapsedConstraints()
  // Constraints that are activated when the view is used for loading animation and error messages.
  private lazy var expandedConstraints: [NSLayoutConstraint] = self.makeExpandedConstraints()

    var auditId : String?
    
    private var isBackEnable : Bool = false
    
  var status = Status(state: .scanning) {
    didSet {
      handleStatusUpdate()
    }
  }

  // MARK: - View lifecycle

  public override func viewDidLoad() {
    super.viewDidLoad()
    view.addSubview(blurView)
    blurView.contentView.addSubviews(textLabel, imageView, borderView,textField)
    handleStatusUpdate()
  }

    public override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        if isBackEnable {
            self.dismiss(animated: true, completion: nil)
        }
    }
    
  public override func viewDidLayoutSubviews() {
    super.viewDidLayoutSubviews()
  //  blurView.frame = view.bounds
    
    let screensize = UIScreen.main.bounds
    blurView.frame = CGRect(x:0 , y: screensize.origin.y - 50, width: screensize.size.width, height: 100)
    blurView.backgroundColor = .clear
  }

  // MARK: - Animations

  /// Animates blur and border view.
  func animateLoading() {
    animate(blurStyle: .light)
    animate(borderViewAngle: CGFloat(Double.pi/2))
  }

  /**
   Animates blur to make pulsating effect.

   - Parameter style: The current blur style.
   */
    private func animate(blurStyle: UIBlurEffect.Style) {
    guard status.state == .processing else { return }

    UIView.animate(
      withDuration: 2.0,
      delay: 0.5,
      options: [.beginFromCurrentState],
      animations: ({ [weak self] in
        self?.blurView.effect = UIBlurEffect(style: blurStyle)
      }),
      completion: ({ [weak self] _ in
        self?.animate(blurStyle: blurStyle == .light ? .extraLight : .light)
      }))
  }

  /**
   Animates border view with a given angle.

   - Parameter angle: Rotation angle.
   */
  private func animate(borderViewAngle: CGFloat) {
    guard status.state == .processing else {
      borderView.transform = .identity
      return
    }

    UIView.animate(
      withDuration: 0.8,
      delay: 0.5,
      usingSpringWithDamping: 0.6,
      initialSpringVelocity: 1.0,
      options: [.beginFromCurrentState],
      animations: ({ [weak self] in
        self?.borderView.transform = CGAffineTransform(rotationAngle: borderViewAngle)
      }),
      completion: ({ [weak self] _ in
        self?.animate(borderViewAngle: borderViewAngle + CGFloat(Double.pi / 2))
      }))
  }

  // MARK: - State handling

  private func handleStatusUpdate() {
    borderView.isHidden = true
    borderView.layer.removeAllAnimations()
    textLabel.text = LanguageKey.scan_barcode_manually
    
    
    
    //status.text ?? messages.makeText(for: status.state)
   // textField.text = "jugal"

    switch status.state {
    case .scanning, .unauthorized:
      textLabel.numberOfLines = 3
      textLabel.textAlignment = .left
      imageView.tintColor = errorTintColor
      textField.textAlignment = .center
    case .processing:
      textLabel.numberOfLines = 10
      textLabel.textAlignment = .center
      borderView.isHidden = false
      imageView.tintColor = errorTintColor
      textField.textAlignment = .center
    case .notFound:
      textLabel.font = UIFont.boldSystemFont(ofSize: 16)
      textLabel.numberOfLines = 10
      textLabel.textAlignment = .center
      imageView.tintColor = errorTintColor
      textField.textAlignment = .center
    }

    if status.state == .scanning || status.state == .unauthorized {
      expandedConstraints.deactivate()
      collapsedConstraints.activate()
    } else {
      collapsedConstraints.deactivate()
      expandedConstraints.activate()
    }
  }
}

// MARK: - Subviews factory

private extension MessageViewController {
    
    func makeTextField() -> UITextField {
        let TextField = UITextField()
        TextField.translatesAutoresizingMaskIntoConstraints = false
        TextField.textColor = .white
        TextField.backgroundColor = .darkGray
        TextField.layer.borderWidth = 0.5
        TextField.layer.borderColor = UIColor.white.cgColor
        TextField.font = UIFont.boldSystemFont(ofSize: 14)
        
//   //     let imageView = UIImageView(image: UIImage(named: "search_icon"))
//        imageView.frame = CGRect(x: 18, y: 3, width: imageView.image!.size.width , height: imageView.image!.size.height)
//        let paddingView: UIView = UIView.init(frame: CGRect(x: 0, y: 0, width: 50, height: 30))
//        paddingView.addSubview(imageView)
//        TextField.rightViewMode = .always
//        TextField.rightView = paddingView
        
        let button = UIButton(type: .custom)
        button.backgroundColor = UIColor(red: 168/255, green: 212/255, blue: 250/255, alpha: 1.0)
        button.setImage(UIImage(named: "search_icon"), for: .normal)
        button.imageEdgeInsets = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
        button.frame = CGRect(x: CGFloat(TextField.frame.size.width - 25), y: CGFloat(5), width: CGFloat(45), height: CGFloat(35))
        button.addTarget(self, action: #selector(self.btn), for: .touchUpInside)
        TextField.rightView = button
        TextField.rightViewMode = .always
        
        return TextField
    }
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        self.textField.resignFirstResponder()
        return true
    }
    
    @objc func btn (){
        //self.textField.text = ""
        
        if !isHaveNetowork() {
           // killLoader()
            //DispatchQueue.main.async {
            DispatchQueue.global(qos: .background).async {
                 self.showErrorOnScreen(errorString:AlertMessage.checkNetwork)
            }

            return
        }
        
        
        if textField.text!.count > 0 {
            self.getEquipmentListFromBarcodeScanner(barcodeString: textField.text!)
           
        }
        self.textField.resignFirstResponder()
    }
  func makeTextLabel() -> UILabel {
    let label = UILabel()
    label.translatesAutoresizingMaskIntoConstraints = false
    label.textColor = .white
    label.numberOfLines = 3
    label.font = UIFont.boldSystemFont(ofSize: 14)
    return label
  }

  func makeImageView() -> UIImageView {
    let imageView = UIImageView()
    imageView.translatesAutoresizingMaskIntoConstraints = false
    imageView.image = imageNamed("").withRenderingMode(.alwaysTemplate)
    imageView.tintColor = .red
    return imageView
  }

  func makeBorderView() -> UIView {
    let view = UIView()
    view.translatesAutoresizingMaskIntoConstraints = false
    view.backgroundColor = .clear
    view.layer.borderWidth = 2
    view.layer.cornerRadius = 10
    view.layer.borderColor = UIColor.black.cgColor
    return view
  }
}

// MARK: - Layout

extension MessageViewController {
  private func makeExpandedConstraints() -> [NSLayoutConstraint] {
    let padding: CGFloat = 10
    let borderSize: CGFloat = 51

    return [
      imageView.centerYAnchor.constraint(equalTo: blurView.centerYAnchor, constant: -60),
      imageView.centerXAnchor.constraint(equalTo: blurView.centerXAnchor),
      imageView.widthAnchor.constraint(equalToConstant: 30),
      imageView.heightAnchor.constraint(equalToConstant: 27),

      textLabel.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 18),
      textLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: padding),
      textLabel.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -padding),
      
      textField.bottomAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 18),
      textField.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 47),
      textField.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -53),
      //textField.widthAnchor.constraint(equalToConstant:-30),
      
      borderView.topAnchor.constraint(equalTo: imageView.topAnchor, constant: -12),
      borderView.centerXAnchor.constraint(equalTo: blurView.centerXAnchor),
      borderView.widthAnchor.constraint(equalToConstant: borderSize),
      borderView.heightAnchor.constraint(equalToConstant: borderSize)
    ]
  }

  private func makeCollapsedConstraints() -> [NSLayoutConstraint] {
    let padding: CGFloat = 10
    var constraints = [
      imageView.topAnchor.constraint(equalTo: blurView.topAnchor, constant: 20),
      imageView.widthAnchor.constraint(equalToConstant: 30),
      imageView.heightAnchor.constraint(equalToConstant: 27),

      textLabel.topAnchor.constraint(equalTo: imageView.topAnchor, constant: -5 ),
      textLabel.leadingAnchor.constraint(equalTo: imageView.trailingAnchor, constant: 7),
        
      textField.bottomAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 30),
      textField.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant:47),
      textField.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant:-55),
      textField.heightAnchor.constraint(equalToConstant:35),
   //  textField.widthAnchor.constraint(equalToConstant:-30)
        
 ]

    if #available(iOS 11.0, *) {
      constraints += [
        imageView.leadingAnchor.constraint(
          equalTo: view.safeAreaLayoutGuide.leadingAnchor,
          constant: padding
        ),
        textLabel.trailingAnchor.constraint(
          equalTo: view.safeAreaLayoutGuide.trailingAnchor,
          constant: -padding
        )
      ]
    } else {
      constraints += [
        imageView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: padding),
        textLabel.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -padding)
        
      ]
    }

    return constraints
  }
    func getEquipmentListFromBarcodeScanner(barcodeString : String) -> Void {
        
            if !isHaveNetowork() {
                killLoader()
                DispatchQueue.main.async {
                   self.showErrorOnScreen(errorString:AlertMessage.networkIssue)
                }
                
                //ShowError(message: AlertMessage.networkIssue, controller: windowController)
                return
            }
        
        
            DispatchQueue.main.async {
                self.textLabel.text = LanguageKey.scan_barcode_manually
                self.textLabel.textColor = .white
            }
        
                let param = Params()
                param.audId = auditId ?? ""
                param.barCode = barcodeString

                showLoader()
                serverCommunicator(url: Service.getEquipmentInfoByBarcode, param: param.toDictionary) { (response, success) in
                   // print(response)
                     killLoader()
                    if(success){
                        let decoder = JSONDecoder()
                       
                        
                        // will receive Equipement data =======
                        if let decodedData = try? decoder.decode(barcodeAuditResponse.self, from: response as! Data) {
                            if decodedData.success == true{
                                    DispatchQueue.main.async {
                                        let vc = UIStoryboard(name: "MainAudit", bundle: nil).instantiateViewController(withIdentifier: "remarkTab") as! RemarkVC;
                                        let navCon = NavClientController(rootViewController: vc)
                                        vc.isPresented = true
                                        vc.equipment = decodedData.data
                                        navCon.modalPresentationStyle = .fullScreen
                                        self.present(navCon, animated: true, completion: nil)
                                        self.isBackEnable = true
                                    }
                            }else{
                                if let msg = decodedData.message {
                                    self.showErrorOnScreen(errorString:msg)
                                }
                            }
                        }else{
                            // will receive Audit data ======
                            if let decodedData = try? decoder.decode(AuditListResponse.self, from: response as! Data) {
                                if decodedData.success == true{
                                        DispatchQueue.main.async {
                                            let vc = UIStoryboard(name: "MainAudit", bundle: nil).instantiateViewController(withIdentifier: "audit") as! AuditVC;
                                            
                                            if let audits = decodedData.data{
                                                vc.arrOFUserData = audits
                                                vc.barcode = barcodeString
                                                let navCon = NavClientController(rootViewController: vc)
                                                navCon.modalPresentationStyle = .fullScreen
                                                vc.isBarcodeScanner = true
                                                self.present(navCon, animated: true, completion: nil )
                                                self.isBackEnable = true
                                            }
                                            
                                        }
                                }else{
                                    if let msg = decodedData.message {
                                        self.showErrorOnScreen(errorString:msg)
                                    }
                                }
                            }
                        }
                   }
                }
            }
    
    
    
    func showErrorOnScreen(errorString : String) -> Void {
        DispatchQueue.main.async {
            self.textLabel.text = getServerMsgFromLanguageJson(key: errorString)
            self.textLabel.textColor = .red
        }
        do {
            sleep(3)
        }
        
        DispatchQueue.main.async {
            self.textLabel.text = LanguageKey.scan_barcode_manually
            self.textLabel.textColor = .white
        }
    }
    }

